<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/html-entities.dtd">

<topic 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
	title="License audit" id="license-audit">

    <var name="feature" value="License audit"/>

    <link-summary>Using the license audit feature, you can check whether your project license is compatible with dependency licenses.</link-summary>

    <p>Making sure that your project license is compatible with the licenses of its dependencies is never an easy task, but
        this is required for legal purposes. To automate this process and avoid mistakes, you can use the license audit
        feature currently supported by several %instance% linters:</p>

    <table>
        <tr>
            <td>Linter</td>
            <td>Tools supported</td>
        </tr>
        <tr>
            <td><a href="qodana-jvm.md"/></td>
            <td>Maven and Gradle</td>
        </tr>
        <tr>
            <td><a href="qodana-php.md"/></td>
            <td>Composer</td>
        </tr>
        <tr>
            <td><a href="qodana-js.md"/></td>
            <td>npm and Yarn</td>
        </tr>
        <tr>
            <td><a href="qodana-python.md"/></td>
            <td>pip</td>
        </tr>
        <tr>
            <td><a href="qodana-go.md"/></td>
            <td>Go Modules</td>
        </tr>
        <tr>
            <td><a href="qodana-dotnet.md"/></td>
            <td/>
        </tr>
    </table>

    <p>This feature is available under the Ultimate Plus license and its trial version and enabled by default.</p>

    <chapter title="How it works" id="license-audit-how-it-works">

        <link-summary>%feature% collects information about project and dependency licenses using configuration files of dependency
            management tools and files containing license texts. Based on the information collected, it builds the
            dependency tree.</link-summary>

        <p>%feature% collects information about project and dependency licenses using configuration files of dependency
            management tools and files containing license texts. Based on the information collected, it builds the
            dependency tree containing information about:</p>
            <list>
                <li>The project license</li>
                <li>Licenses of project dependencies</li>
                <li>Licenses of the dependencies invoked by project dependencies</li>
            </list>
        <p>This tree shows which dependency licenses are (in)compatible with your project license.</p>

        <p>For example, a project is licensed under the Apache-2.0 license and uses three dependencies licensed under
            the MIT, GPL-2.0-only, and Apache-2.0 licenses. This table explains which dependency licenses are compatible
            with the project license.</p>

        <table>
            <tr>
                <td>Software</td>
                <td>Licensed under</td>
                <td>Compatible with the project license</td>
            </tr>
            <tr>
                <td>Project software</td>
                <td>Apache-2.0</td>
                <td>&mdash;</td>
            </tr>
            <tr>
                <td>Dependency A</td>
                <td>MIT</td>
                <td>Yes</td>
            </tr>
            <tr>
                <td>Dependency B</td>
                <td>GPL-2.0-only</td>
                <td>No</td>
            </tr>
            <tr>
                <td>Dependency C</td>
                <td>Apache-2.0</td>
                <td>Yes</td>
            </tr>
        </table>

        <tip>You can specify dependency licenses manually using the
            <a href="qodana-yaml.md" anchor="Override+a+dependency+license"><code>dependencyOverrides</code></a> option.</tip>

        <note>In case a project root contains several license files, the file with the
            <code>LICENSE.*</code> name receives the highest priority, and %feature% uses its text as the project
            license text.</note>


        <p>Depending on the location of license information, the <a href="qodana-jvm.md"/> linter performs a
            sequence of steps to find it. First of all, it searches for any license references in the
            <code>LICENSE.*</code> files. Next, it scans through the <code>pom.xml</code> file. If necessary,
            it then scans through dependency source files. Otherwise, the linter requests the
            <a href="https://package-search.jetbrains.com/"><code>PACKAGE-SEARCH</code></a> plugin.
        </p>

        <p>The <a href="qodana-js.md"/> linter using npm reads information about project and dependency licenses using
            configuration files of package management tools. The <a href="qodana-php.md"/> linter also reads license information
        from the Composer configuration file.</p>

        <p>The <a href="qodana-python.md"/>, <a href="qodana-go.md"/>, and <a href="qodana-js.md"/> linter using
            Yarn require that the <code>LICENSE.*</code> file in the project root contains the project license.
        </p>

        <p>For all linters except <a href="qodana-jvm.md"/>, you also need to have project
            dependencies installed using the <a href="before-running-qodana.md"><code>bootstrap</code></a> key of
            the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file.</p>


        <p>After %instance% has finished analyzing your project, the results become available in the
            <a anchor="license-audit-verifying-data">report</a>.</p>

    </chapter>

    <chapter title="Run license audit" id="license-audit-running-feature">

            <note>While configuring <a href="qodana-yaml.md" anchor="exclude-paths">inspection scopes</a>, make sure that
            the file containing the build configuration is included in the scope.</note>

            <p>Starting from version 2024.1 of %product%, %feature% is enabled dy default. You can see inspection results
            in the <a anchor="license-audit-verifying-data">License audit</a> tab of the %product% report. To see them
            in the <a href="ui-overview.md" anchor="ui-overview-actual-problems">Actual problems</a> tab too, in the
                <a href="qodana-yaml.md">configuration file</a> enable the <code>raiseLicenseProblems</code> option:</p>

            <code-block lang="yaml">
                raiseLicenseProblems: true
            </code-block>

            <p>To disable license audit, in the <a href="qodana-yaml.md">configuration file</a>
                exclude the <code>CheckDependencyLicenses</code> inspection, for example:</p>

        <code-block lang="yaml">
            exclude:
            &nbsp;&nbsp;- name: CheckDependencyLicenses
        </code-block>

        <chapter title="Enable package-search" id="license-audit-enable-package-search">

            <p>Starting from version 2024.1 of %product%,
                <a href="https://www.jetbrains.com/help/idea/package-search.html"><code>package-search</code></a> is by default disabled because of
                inaccurate results and performance issues. To enable <code>package-search</code>, in the <a href="qodana-yaml.md">configuration file</a>
            enable the <code>enablePackageSearch</code> option:</p>

            <code-block lang="yaml">
                enablePackageSearch: true
            </code-block>

        </chapter>

        <chapter title="Ignore dependencies" id="license-audit-ignoring-dependencies">
            <p>In the <a href="qodana-yaml.md">configuration file</a>, you can use the <code>dependencyIgnores</code> option to ignore a license of a specific dependency in your project:</p>
            <code-block lang="yaml">
                dependencyIgnores:
                  - name: "aapt2-proto"
                  - name: "dexlib2"
            </code-block>
        </chapter>

        <chapter title="Allow or prohibit dependency licenses" id="license-allow-prohibit-licenses">
            <p>In the <a href="qodana-yaml.md">configuration file</a>, you can override the license matrix and specify the list of
                dependency licenses that are allowed or prohibited for a specific project license.</p>
            <p>In this snippet, the <code>keys</code> key accepts application licenses, and the <code>allowed</code> and
                <code>prohibited</code> keys accept the lists of allowed and prohibited dependency licenses respectively.
                As a result, the <code>AGPL-3.0-only</code> becomes compatible with the <code>AFL-2.0</code> project
                license, while the <code>Apache-1.0</code> dependency license becomes incompatible.</p>
            <code-block lang="yaml">
                licenseRules:
                  - keys:
                      - "AFL-2.0"
                    allowed:
                      - "AGPL-3.0-only"
                    prohibited:
                      - "Apache-1.0"
            </code-block>

            <p>All keys from this sample can accept several values:</p>

            <code-block lang="yaml">
                licenseRules:
                  - keys:
                    - "PROPRIETARY-LICENSE"
                    allowed: ["CC0-1.0", "CPL-1.0", "CC-BY-4.0", "EPL-1.0", "CDDL-1.0"]
            </code-block>


        </chapter>

        <chapter title="Override a dependency license" id="license-audit-override-license">
            <p>In the <a href="qodana-yaml.md">configuration file</a>, you can override a dependency license identifier.
                This can be useful when a dependency is dual-licensed,
                and you want to omit some license, or when the license name cannot be detected from the dependency
                sources correctly.</p>
            <p>Using this sample, you can tell %instance% to detect only the <code>CDDL-1.1</code> and
                <code>GPL-2.0-with-classpath-exception</code> licenses for <code>jaxb-runtime</code> version 2.3.1.
            </p>
            <p>In this sample, <code>url</code> is optional.</p>

            <code-block lang="yaml">
                dependencyOverrides:
                  - name: "jaxb-runtime"
                    version: "2.3.1"
                    url: "https://github.com/javaee/jaxb-v2"
                    licenses:
                      - key: "CDDL-1.1"
                        url: "https://github.com/javaee/jaxb-v2/blob/master/LICENSE"
                      - key: "GPL-2.0-with-classpath-exception"
                        url: "https://github.com/javaee/jaxb-v2/blob/master/LICENSE"
            </code-block>
        </chapter>

        <chapter title="Create custom dependencies" id="license-audit-custom-dependencies">
            <p>If you want to include the dependency that should be mentioned in the report but is impossible to detect
                from the project sources, in the <a href="qodana-yaml.md">configuration file</a> you can use the
                <code>customDependencies</code> key to specify it:</p>

            <code-block lang="yaml">
                customDependencies:
                  - name: ".babelrc JSON Schema (.babelrc-schema.json)"
                    version: "JSON schema for Babel 6+ configuration files"
                    licenses:
                      - key: "Apache-2.0"
                        url: "https://github.com/SchemaStore/schemastore/blob/master/LICENSE"
            </code-block>
        </chapter>

    </chapter>

    <chapter title="Verify data" id="license-audit-verifying-data">
        <include from="lib_qd.topic" element-id="license-audit-tab" use-filter="license-audit,empty"/>
    </chapter>

</topic>
