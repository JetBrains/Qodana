<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Qodana Community for .NET"
       id="qodana-cdnet-docker-readme">

    <var name="linter" value="Qodana Community for .NET"/>
    <var name="linter-shell" value="qodana-cdnet:2023.3-eap"/>
    <var name="linter-page-url" value="qodana-dotnet-community.md"/>
    <var name="ide" value="ReSharper"/>
    <var name="code-inspection-ide-help-url" value="https://www.jetbrains.com/help/resharper/Code_Analysis__Index.html"/>
    <var name="code-inspection-profiles-ide-help-url" value="https://www.jetbrains.com/help/idea/?Customizing_Profiles"/>
    <var name="docker-image" value="jetbrains/qodana-cdnet:2023.3-eap"/>
    <var name="GitHubLink" value="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"/>


    <p>
        <img src="https://jb.gg/badges/official-flat-square.svg" alt="official JetBrains project"/>
    </p>

    <p>
        The Docker image for the <a href="%linter-page-url%">%linter%</a> linter is provided to support different usage
        scenarios:
    </p>
    <list>
        <li>Running the analysis on a regular basis as part of your continuous integration (<i>CI-based execution</i>)
        </li>
        <li>Single-shot analysis (for example, performed <i>locally</i>).
        </li>
    </list>

    <p>You can run the %linter% linter using two methods.
        <a href="https://github.com/JetBrains/qodana-cli">Qodana CLI</a> is the easiest method. If necessary,
        check the <a href="https://github.com/JetBrains/qodana-cli/releases/latest">installation page</a> to install
        Qodana CLI. Alternatively, you can use the Docker commands from the <menupath>Docker image</menupath> tab.</p>

    <chapter id="quick-start-recommended-profile" title="Quick start">

        <note>The %linter% linter does not support profiles and their configuration options.</note>

        <chapter id="Run+analysis+locally" title="Run analysis locally">

            <note>
                <p>
                    <include src="lib_qd.xml" include-id="docker-ram-note"/>
                </p>
            </note>

            <tabs group="docker-options">
                <tab title="Docker image" group-key="docker-image">
                    <procedure>
                        <step>
                            <p>
                                Pull the image from Docker Hub (only necessary to update to the <code>latest</code> version):
                            </p>
                            <code style="block" lang="shell" prompt="$">docker pull jetbrains/%linter-shell%
                            </code>
                        </step>
                        <step>
                            <p>Run the following command to start inspecting your source code:</p>
                            <code style="block" lang="shell" prompt="$">
                                docker run \
                                -v &lt;source-directory&gt;/:/data/project/ \
                                -v &lt;output-directory&gt;/:/data/results/ \
                                -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                jetbrains/%linter-shell%
                            </code>
                            <p>
                                where <code>source-directory</code> and <code>output-directory</code> are full local paths to,
                                respectively, the project source code directory and the analysis results directory. The
                                <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                                required by the
                                <a href="pricing.md" anchor="pricing-linters-licenses">linter license</a>. Using the linter
                                without the project token is useless because it does not support showing inspection results
                                locally.
                            </p>
                        </step>
                    </procedure>
                    <p>If you don't need the user interface and prefer to study raw data, use the following command:</p>
                    <code style="block" lang="shell" prompt="$">
                        docker run \
                        -v &lt;source-directory&gt;/:/data/project/ \
                        -v &lt;output-directory&gt;/:/data/results/ \
                        -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                        jetbrains/%linter-shell%
                    </code>
                    <p>The <code>output-directory</code> will contain <a href="qodana-inspection-output.md" anchor="Basic+output">the inspection report</a>.
                    </p>
                    <p>If you run the analysis several times in a row, make sure you've cleaned the results directory before
                        using it in <code>docker run</code> again.
                    </p>
                </tab>
                <tab title="Qodana CLI" group-key="qodana-cli">
                    <p>In the project root directory, run this command to inspect your code and view the inspection
                        report locally:</p>
                    <code filter="non-gs" style="block" lang="shell" prompt="$">
                        qodana scan \
                        -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                        -l %docker-image% \
                        --show-report
                    </code>
                    <p>If you don't need the user interface and prefer to study raw data, use the following command:</p>
                    <code style="block" lang="shell" prompt="$">
                        qodana scan \
                        -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                        -l %docker-image% \
                        --results-dir &lt;output-directory&gt;
                    </code>
                    <p>The <code>output-directory</code> specifies the directory where the SARIF-formatted report will be
                        saved. The <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                        required by the
                        <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters.</p>
                </tab>
            </tabs>

        </chapter>

        <chapter id="Run+analysis+in+CI" title="Run analysis in CI">

            <tabs group="docker-options">
                <tab title="Docker image" group-key="docker-image">
                    <p>Use the following command as a task in a generic Shell executor:</p>
                    <code style="block" lang="shell" prompt="$">
                        docker run \
                        -v &lt;source-directory&gt;/:/data/project/ \
                        -v &lt;output-directory&gt;/:/data/results/ \
                        -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                        jetbrains/%linter-shell%
                    </code>
                    <p>where <code>source-directory</code> and <code>output-directory</code> are full paths to, respectively,
                        the project source code directory and the <a href="qodana-inspection-output.md" anchor="Basic+output">analysis
                            results directory</a>. The <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                        required by the
                        <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters.
                    </p>
                    <p>Consider using the <a href="quality-gate.xml"/> feature to make the build fail when a certain number
                        of problems is reached and the <a href="baseline.xml"/> feature to compare each new %linter%
                        run to some initial run selected as a <emphasis>baseline</emphasis>.
                    </p>
                    <tip>
                        <p>
                            For details on available CI integrations, see <a href="ci.md"/>.
                        </p>
                    </tip>
                </tab>
                <tab title="Qodana CLI" group-key="qodana-cli">
                    <p>Run this command in the project root directory:</p>
                    <code style="block" lang="shell" prompt="$">
                        qodana scan \
                        -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                        -l %docker-image% \
                        --results-dir &lt;output-directory&gt;
                    </code>
                    <p>This will save inspection results to the directory specified by <code>output-directory</code>.</p>
                    <p>You can also apply the <a href="quality-gate.xml"/> feature to make the build fail when a certain number
                        of problems is reached by using the <code>--fail-threshold</code>
                        <a href="https://github.com/JetBrains/qodana-cli#options-1">option</a>.</p>
                    <p>The <a href="baseline.xml"/> feature compares each new %linter% run to some initial run using
                        the <code>--baseline</code> and
                        <code>--baseline-include-absent</code> options.
                    </p>
                    <tip>
                        <p>
                            For details on available CI integrations, see <a href="ci.md"/>.
                        </p>
                    </tip>

                </tab>
            </tabs>


            <chapter id="qodana-dotnet-docker-readme-github" title="Run analysis in GitHub">

                <note>This feature is in experimental mode, which means that its operation can be unstable.</note>

                <p>This feature requires that you specify the %linter% name either in the <a href="qodana-yaml.md" anchor="Specify+a+linter"><code>qodana.yaml</code></a> file,
                or using the <a href="github.md" anchor="Configuration"><code>args</code></a> configuration option of GitHub, for example: <code style="block" lang="yaml">args: --linter,%linter-shell%</code> </p>

                <p>In GitHub, %product% is implemented as the <code>Qodana Scan</code> GitHub Action.To configure the
                    <code>Qodana Scan</code> GitHub Action, save the <code>.github/workflows/code_quality.yml</code> file
                    containing the workflow configuration:</p>

                <code style="block" lang="yaml">
                    name: Qodana
                    on:
                      workflow_dispatch:
                      pull_request:
                      push:
                        branches:
                          - main
                          - 'releases/*'

                    jobs:
                      qodana:
                        runs-on: ubuntu-latest
                        steps:
                          - uses: actions/checkout@v3
                            with:
                              fetch-depth: 0
                          - name: 'Qodana Scan'
                            uses: JetBrains/qodana-action@v2023.3
                </code>

                <p>To authorize in <a href="cloud-about.xml">Qodana Cloud</a> and forward reports to it, follow these steps:</p>

                <procedure>
                    <step><p>In the GitHub UI, create the <code>QODANA_TOKEN</code> <a href="%GitHubLink%">encrypted secret</a> and
                        save the <a href="cloud-projects.xml" anchor="cloud-manage-projects">project token</a> as its value.</p></step>
                    <step><p>In a GitHub <a href="github.md" anchor="Basic+configuration">workflow</a>,
                        add this snippet to invoke the <code>Qodana Scan</code> action:</p>

                        <code style="block" lang="yaml">
                            - name: 'Qodana Scan'
                              uses: JetBrains/qodana-action@v2022.3.3
                              env:
                                QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code>
                    </step>
                </procedure>
            </chapter>

        </chapter>
    </chapter>

    <chapter id="Configure+via+qodana.yaml" title="Configure via qodana.yaml">

        <include src="lib_qd.xml" include-id="docker-configure-via-qodana-yaml" use-filter="for-others"/>

    </chapter>

    <chapter id="Analyzing+specific+solution+or+project" title="Analyze specific solution or project">

        <include src="lib_qd.xml" include-id="docker-dotnet-specific-solution-project" use-filter="empty,cdnet"/>

        <chapter id="docker-cdnet-specific-solution-project-configure-solution" title="Configure a solution">

            <p>A solution configuration defines which projects in the solution are build, and which project
                configurations are used for specific projects within the solution.</p>

            <p>Each newly-created solution includes the <code>Debug</code> and <code>Release</code>
                configurations, which can be complemented by your custom configurations.</p>

            <p>You can switch configurations of the current solution using the <code>--configuration</code>
                option. For example, use this to switch to the <code>Release</code>
                configuration:</p>

            <code style="block" lang="shell">
                --configuration=Release
            </code>

            <p>Alternatively, you can specify the configuration in <code>qodana.yaml</code>:</p>

            <code style="block" lang="yaml">
                dotnet:
                  configuration: Release
            </code>

            <p>By default, the solution platform is set to <code>Any CPU</code>.You can override this using the
                <code>--platform</code> option:</p>

            <code style="block" lang="shell">
                --platform=x86
            </code>

            <p>Alternatively, you can specify the platform in <code>qodana.yaml</code>:</p>

            <code style="block" lang="yaml">
                dotnet:
                  platform: x86
            </code>
        </chapter>


    </chapter>

    <chapter id="Usage+statistics" title="Usage statistics">

        <p>
            According to the <a href="https://www.jetbrains.com/legal/agreements/user_eap.html">JetBrains EAP user
            agreement</a>, we can use third-party services to analyze the usage of our features to further improve the
            user experience. All data will be collected <a href="https://www.jetbrains.com/company/privacy.html">
            anonymously</a>. You can disable statistics by using the <code>--no-statistics=true</code> command.
        </p>

    </chapter>

</topic>
