<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/html-entities.dtd">

<topic 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
	title="Plugins" id="extending-qodana-plugins">

    <var name="inspection-url" value="https://plugins.jetbrains.com/docs/intellij/code-inspections-and-intentions.html#inspections"/>
    <var name="php-ea-plugin" value="https://plugins.jetbrains.com/plugin/7622-php-inspections-ea-extended-"/>
    <var name="plugin-installation" value="https://www.jetbrains.com/help/phpstorm/managing-plugins.html"/>
    <var name="conf-dir" value="https://www.jetbrains.com/help/phpstorm/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory"/>
    <var name="plugin-dir" value="https://www.jetbrains.com/help/phpstorm/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#plugins-directory"/>
    <var name="plugin-settings" value="https://www.jetbrains.com/help/phpstorm/managing-plugins.html#open-plugin-settings"/>
    <var name="inspection-settings" value="https://www.jetbrains.com/help/phpstorm/inspections-settings.html"/>
    <var name="configure-profiles" value="https://www.jetbrains.com/help/phpstorm/customizing-profiles.html#a7a20220"/>
    <var name="plugin-config" value="https://www.jetbrains.com/help/phpstorm/directories-used-by-the-ide-to-store-settings-caches-plugins-and-logs.html#config-directory"/>
    <var name="extending-qodana-developing-plugins" value="https://plugins.jetbrains.com/docs/intellij/developing-plugins.html"/>

    <link-summary>You can extend %instance% using either existing plugins from repositories, or by developing
        your own plugins.</link-summary>

    <p>You can extend %instance% using either existing plugins from repositories like
        <a href="https://plugins.jetbrains.com/">JetBrains Marketplace</a>, or using custom plugins.</p>

        <chapter id="extending-qodana-repository-plugins-configure-plugin" title="Plugins from JetBrains Marketplace">

                <p>To have a plugin installed from <a href="https://plugins.jetbrains.com/">JetBrains Marketplace</a>
                    and running, in the <code>qodana.yaml</code> file specify the
                    <a href="qodana-yaml.md" anchor="Manage+plugins"><code>plugin</code></a> option:</p>

                <code-block lang="yaml">
                    plugins:
                    &nbsp;&nbsp;- id: &lt;plugin.id&gt;
                </code-block>

                <p>Here, <code>&lt;plugin-id&gt;</code> denotes the Plugin ID from
                    <a href="https://plugins.jetbrains.com/">JetBrains Marketplace</a>. For example,
                for the <a href="https://plugins.jetbrains.com/plugin/16136-grazie-professional">Grazie Professional</a>
                    Plugin ID will be <code>com.intellij.grazie.pro</code>. To find the ID of a specific plugin,
                    on the plugin page of <a href="https://plugins.jetbrains.com/">JetBrains Marketplace</a> click the
                    <ui-path>Overview</ui-path> tab, and then navigate to the
                    <ui-path>Additional Information</ui-path> section.</p>

                <note>Several plugins may have dependencies that are not present in %product% images. You can check the
                    list of dependencies included in each %product% linter using our
                    <a href="https://github.com/JetBrains/qodana-docker/blob/main/2024.2/jvm/included_plugins.txt">GitHub repository</a>.
                    You can navigate to the <ui-path>Versions</ui-path> tab and then click the latest version.</note>
            </chapter>

        <chapter id="extending-qodana-repository-plugins-manual-installation" title="Custom plugins">

            <tip>To learn how to develop plugins, you can review the
                <a href="https://plugins.jetbrains.com/docs/intellij/getting-started.html">Creating Your First Plugin</a>
                page of the IntelliJ Platform Plugin SDK documentation portal. Besides that, each plugin should perform
                inspections and produce inspection results as described in the
                <a href="%inspection-url%">Inspections</a> section of the documentation portal.
            </tip>

            <p>Before running a custom plugin using %product%, prepare the following components:</p>

            <list>
                <li>Files containing the plugin code, for example <code>.jar</code> files,</li>
                <li>Plugin configuration contained in a file,</li>
                <li>The inspection name that enables the plugin.</li>
            </list>

            <p>Follow this procedure to set up a plugin:</p>

            <procedure>
                <step>
                    <p>In your project root directory, create the <code>.qodana</code> directory.</p>
                </step>
                <step>
                    <p>In the <code>.qodana</code> directory, save all files related to a plugin. In case the
                        plugin consists of several <code>.jar</code> files, you can create a directory inside <code>.qodana</code>
                        and save them there. You can also download and run plugins from
                        <a href="https://plugins.jetbrains.com/">JetBrains Marketplace</a>.</p>
                </step>
                <step>In the <code>qodana.yaml</code> file, enable the inspection as described in the
                    <a href="qodana-yaml.md" anchor="Include+an+inspection+into+the+analysis+scope">YAML file</a> section.
                </step>
                <step>
                    <p>Run %product% using examples below:</p>
                    <tabs>
                        <tab title="Qodana CLI">
                            <code-block lang="bash" prompt="$">
                                qodana scan \
                                &nbsp;&nbsp;&nbsp;-l &lt;linter&gt;
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;-v &lt;plugin-directory&gt;/&lt;plugin-name&gt;.jar:/opt/idea/custom-plugins/&lt;plugin-name&gt;.jar \
                                &nbsp;&nbsp;&nbsp;-v &lt;path-to-plugin-config&gt;/&lt;config-file&gt;:/opt/idea/custom-plugins/&lt;config-file&gt;
                            </code-block>
                        </tab>
                        <tab title="Docker image">
                            <code-block lang="bash" prompt="$">
                                docker run \
                                &nbsp;&nbsp;&nbsp;-v &lt;project-directory&gt;:/data/project/ \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;-v &lt;plugin-directory&gt;/&lt;plugin-name&gt;.jar:/opt/idea/custom-plugins/&lt;plugin-name&gt;.jar \
                                &nbsp;&nbsp;&nbsp;-v &lt;path-to-plugin-config&gt;/&lt;config-file&gt;:/opt/idea/custom-plugins/&lt;config-file&gt;
                                &nbsp;&nbsp;&nbsp;&lt;linter&gt;
                            </code-block>
                        </tab>
                        <tab title="GitHub Actions">
                            <code-block lang="yaml" filter="generic">
                                name: Qodana
                                on:
                                    workflow_dispatch:
                                    pull_request:
                                    push:
                                        branches: # Specify your branches here
                                            - main # The 'main' branch
                                            - 'releases/*' # The release branches
                                jobs:
                                    qodana:
                                        runs-on: ubuntu-latest
                                        permissions:
                                            contents: write
                                            pull-requests: write
                                            checks: write
                                        steps:
                                            - uses: actions/checkout@v3
                                              with:
                                                  ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                                  fetch-depth: 0  # a full history is required for pull request analysis
                                            - name: 'Qodana Scan'
                                              uses: JetBrains/qodana-action@v2024.2
                                              with:
                                                  args: >
                                                        --linter,&lt;linter&gt;,
                                                        -v,&lt;plugin-directory&gt;/&lt;plugin-name&gt;.jar:/opt/idea/custom-plugins/&lt;plugin-name&gt;.jar,
                                                        -v,&lt;path-to-plugin-config&gt;/&lt;config-file&gt;:/opt/idea/custom-plugins/&lt;config-file&gt;
                                              env:
                                                  QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                            </code-block>
                        </tab>
                    </tabs>
                    <p>Here, <code>&lt;linter&gt;</code> denotes the <a href="linters.md">linter name</a>, and <code>QODANA_TOKEN</code> refers to a <a href="project-token.md">project token</a>.</p>
                </step>
            </procedure>
        </chapter>
</topic>
