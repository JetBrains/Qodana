<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/html-entities.dtd">
<!--suppress TopicContentShortcutHardcodedInspections -->

<topic 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
	id="lib_qd" title="Library of includes" is-library="true">

    <snippet id="docker-ram-note">
        Running analysis is a resource-intensive operation. If you experience issues, consider increasing the Docker
        Desktop runtime memory limit, which is set to 2 GB by default. See the Docker Desktop documentation for <a href="https://docs.docker.com/desktop/windows/#resources">Windows
    </a> and <a href="https://docs.docker.com/desktop/mac/#resources">macOS</a>.
    </snippet>


    <snippet id="license-audit-tab">

        <p filter="license-audit">To view license audit results, in the inspection report click the <ui-path>License audit</ui-path> tab.</p>

        <p filter="ui-overview">The <ui-path>License audit</ui-path> tab provides results of inspection by the
            <a href="license-audit.topic">license audit</a> feature. </p>

        <img src="license-audit-overview-tree.png" dark-src="license-audit-overview-tree_dark.png" width="706" alt="The dependency tree" border-effect="line"/>

        <p>License audit inspection results are grouped into a dependency tree.</p>

        <list type="decimal">
            <li>If applicable, you can expand a specific dependency to see its dependency tree.</li>
            <li>Using <ui-path>Only alerted</ui-path>, you can switch between all project dependencies and dependencies
                which licenses are incompatible with the project license.</li>
            <li>In the <ui-path>Licenses</ui-path> section, you can find the list of project, module and dependency licenses.
                Using <ui-path>Open license rules</ui-path>, you can view the rules of license compatibility.</li>
            <li>You can download the list of licenses in various formats.</li>
        </list>
    </snippet>

    <snippet id="qodana-deployment-options">
        <p>%instance% provides several deployment options to better fit your needs:</p>
        <list>
            <li><a href="native-mode.md">Native mode</a> available in the <a href="dotnet.md">Qodana for .NET</a> linter</li>
            <li><a href="docker-images.md">Docker images</a> let you inspect
                <a href="Quick-start.topic">local projects</a> and build %instance% into your CI/CD pipelines.</li>
            <li><a href="qodana-ide-plugin.md">JetBrains IDEs</a> let you run %instance%, connect to Qodana Cloud, open and review inspection reports.</li>
            <li><a href="vscode.md">Qodana extension</a> for Visual Studio Code lets you retrieve reports from Qodana Cloud and review inspection reports.</li>
            <li><a href="ci.md">Integration tools</a> include applications for seamless integration with CI/CD systems
                like GitHub and TeamCity, and guides for configuring %instance% Docker images for CI/CD. </li>
            <li><a href="qodana_gradle_plugin.md"/> provides the Gradle interface for running %instance% in IntelliJ IDEA.</li>
            <!--<li><a href="service.md">Cloud service</a> is a cloud-based version of %instance%. </li> -->
        </list>
    </snippet>

    <snippet id="configure-jdk-qodana-yaml">

        <p filter="configure-jdk">In the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file, you
            can specify the JDK version using the <code>projectJDK</code> option, for example: </p>

        <p filter="configure-jdk-qodana-yaml">Use the <code>projectJDK</code> option to specify
            the JDK version, for example: </p>

        <code-block lang="yaml">
            projectJDK: 11
        </code-block>

        <p>or:</p>

        <code-block lang="yaml">
            projectJDK: 1.8
        </code-block>

        <p>You can also specify JDK using the name:</p>

        <code-block lang="yaml">
            projectJDK: corretto-19
        </code-block>
    </snippet>

    <snippet id="linters-supported-features">

        <p>The %qp% linter provides the following %instance% features:</p>

        <table filter="php">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="php-language-upgrade.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="taint-analysis.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="jvm">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="non-jvm">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="js">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="dotnet">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="community">
            <tr>
                <td>Feature</td>
                <td>Available under the license</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Community</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Community</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Community</td>
            </tr>
        </table>

        <table filter="cdnet">
            <tr>
                <td>Feature</td>
                <td>Available under the license</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Community</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Community</td>
            </tr>

        </table>
    </snippet>

    <snippet id="github-basic-configuration">

        <procedure>
            <step>On the <ui-path>Settings</ui-path> tab of the GitHub UI, create the <code>QODANA_TOKEN</code>
                <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">encrypted secret</a>
                and save the <a href="cloud-projects.topic" anchor="cloud-manage-projects">project token</a> as its value.
            </step>
            <step>On the <ui-path>Actions</ui-path> tab of the GitHub UI, set up a new workflow and create the
                <code>.github/workflows/code_quality.yml</code> file.</step>
            <step>To inspect the <code>main</code> and <code>master</code> branches, as well as release branches and the
                pull requests coming to your repository, save this workflow configuration to the
                <code>.github/workflows/code_quality.yml</code> file:
                <code-block lang="yaml">
                    name: Qodana
                    on:
                      workflow_dispatch:
                      pull_request:
                      push:
                        branches: # Specify your branches here
                          - main # The 'main' branch
                          - master # The 'master' branch
                          - 'releases/*' # The release branches

                    jobs:
                      qodana:
                        runs-on: ubuntu-latest
                        permissions:
                          contents: write
                          pull-requests: write
                          checks: write
                        steps:
                          - uses: actions/checkout@v3
                            with:
                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                              fetch-depth: 0  # a full history is required for pull request analysis
                          - name: 'Qodana Scan'
                            uses: JetBrains/qodana-action@v2024.2
                            env:
                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                </code-block>
            </step>
        </procedure>
    </snippet>

    <snippet id="qodana-severity-levels">
        <table>
            <tr>
                <td>IDE severity</td>
                <td filter="for-report">SARIF severity</td>
                <td filter="for-profile"><a href="qodana-sarif-output.md">SARIF</a> severity</td>
                <td><a href="ui-overview.md">Qodana report</a> severity</td>
                <td><a href="https://docs.codeclimate.com/docs/getting-started-with-code-climate">Code Climate</a> severity</td>
                <td>Bitbucket severity</td>
            </tr>
            <tr>
                <td>ERROR</td>
                <td>ERROR</td>
                <td>Critical</td>
                <td>Blocker</td>
                <td>High</td>
            </tr>
            <tr>
                <td>WARNING</td>
                <td>WARNING</td>
                <td>High</td>
                <td>Critical</td>
                <td>High</td>
            </tr>
            <tr>
                <td>WEAK WARNING</td>
                <td>NOTE</td>
                <td>Moderate</td>
                <td>Major</td>
                <td>Medium</td>
            </tr>
            <tr>
                <td>TYPO</td>
                <td>NOTE</td>
                <td>Low</td>
                <td>Minor</td>
                <td>Low</td>
            </tr>
            <tr>
                <td>INFORMATION</td>
                <td>NOTE</td>
                <td>Info</td>
                <td>Info</td>
                <td>Info</td>
            </tr>
            <tr>
                <td>OTHER</td>
                <td>NOTE</td>
                <td>Info</td>
                <td>Info</td>
                <td>Info</td>
            </tr>
        </table>
    </snippet>

    <snippet id="bitbucket-basic-configuration">
        <p>Here is the basic configuration snippet for the <code>bitbucket-pipelines.yml</code> file that lets you run %instance%
            in Bitbucket Cloud pipelines:</p>

        <code-block lang="yaml">
            image: atlassian/default-image:4

            pipelines:
              branches:
                main:
                  - step:
                      name: Qodana
                      caches:
                        - qodana
                      image: jetbrains/qodana-&lt;linter&gt; # Specify a Qodana linter here. For example, jetbrains/qodana-jvm:latest
                      script:
                        - export QODANA_TOKEN=$QODANA_TOKEN  # Export the environment variable
                        - qodana --results-dir=$BITBUCKET_CLONE_DIR/.qodana --report-dir=$BITBUCKET_CLONE_DIR/.qodana/report --cache-dir=$BITBUCKET_CLONE_DIR/.qodana/cache
                      artifacts:
                        - .qodana/report

            definitions:
              caches:
                qodana: .qodana/cache
        </code-block>

        <p>Here, the <code>branches</code> block specifies which branches to inspect.</p>

        <p>The <code>image</code> block specifies the %instance% <a href="linters.md">linter</a> that will be invoked in the pipeline.</p>

        <p>The <code>script</code> block contains the <code>- export QODANA_TOKEN=$QODANA_TOKEN</code> line that specifies the
            <a href="project-token.md">project token</a> required by Qodana Cloud and saved as the <code>$QODANA_TOKEN</code>
            <a href="https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/#Secured-variables">variable</a>.
            The <code>- qodana ...</code> line in this block tells Bitbucket which directories to use while running
            the pipeline, and it can also contain %instance% <a href="docker-image-configuration.topic">options</a>.</p>
    </snippet>

    <snippet id="root-and-non-root-users-info-bubble">
        <tip>Check out the <a href="docker-image-configuration.topic" anchor="docker-config-reference-docker-environment-run-non-root"/> section
            to learn more about how root and non-root users can run %product%.</tip>
    </snippet>

    <snippet id="teamcity-add-a-qodana-runner">
        <p filter="intro">Assuming that you have already created your <a href="%TeamCityProject%">project</a> and <a href="%TeamCityBuildConfig%">build configuration</a>, follow the steps below.</p>
        <procedure>
            <step>
                In the TeamCity UI, navigate to the <a href="%TeamCityBuildConfig%">configuration page</a> of a build where you would
                like to run %product%.
            </step>
            <step>
                On the <ui-path>Build Configuration Settings</ui-path> page, navigate to the <a href="%TeamCityBuildSteps%"><ui-path>Build steps</ui-path></a> page.
            </step>
            <step>
                On the <ui-path>Build steps</ui-path> page, click the <ui-path>Add build step</ui-path> button.
            </step>
            <step>
                On the page that opens, select the <ui-path>Qodana</ui-path> runner.
            </step>
            <step>
                <p>On the <ui-path>New Build Step: Qodana</ui-path> page, click <ui-path>Show advanced options</ui-path> and configure the <ui-path>%product%</ui-path> runner:</p>
                <list>
                    <li>
                        <ui-path>Step name</ui-path> uniquely identifies this step among other build steps.
                    </li>
                    <li>
                        <ui-path>Step ID</ui-path> uniquely identifies this step among other build steps.
                    </li>
                    <li>
                        <ui-path>Execute step</ui-path> configures the build condition that will trigger this build step.
                    </li>
                    <li>
                        <ui-path>Working directory</ui-path> sets the directory for the build process, see the <a href="https://www.jetbrains.com/help/teamcity/build-working-directory.html">TeamCity</a> documentation for details.
                        You can leave this field empty if the <code>Checkout directory</code> parameter is specified on the <ui-path>Version Control Settings</ui-path> tab.
                    </li>
                    <li>
                        <ui-path>Report ID</ui-path> uniquely identifies the report to let you distinguish between multiple reports when several inspection steps are configured within a single build.
                    </li>
                    <li>
                        The <ui-path>Forward reports to TeamCity tests</ui-path> checkbox configures %instance% report availability in
                        the <a href="https://www.jetbrains.com/help/teamcity/build-results-page.html#Tests+Tab">Test tab</a> of the
                        TeamCity UI. Using this option, you can view codebase problems along with other problems detected.
                    </li>
                    <li>
                        <p><ui-path>Linter</ui-path> configures the <a href="linters.md">%product% linter</a>.</p>
                        <p>%teamcity-linter-list%</p>
                        <p filter="dotnet-no-build">Here, specify the <code>%qp-co%</code> linter.</p>
                    </li>
                    <li>
                        <ui-path>Version</ui-path> is by default set to <code>Latest</code>.
                    </li>
                    <li>
                        <p><ui-path>Inspection profile</ui-path> defines an <a href="inspection-profiles.md">inspection profile</a>:</p>
                        <list>
                            <li><code>Recommended (default)</code> is one of the <a href="inspection-profiles.md" anchor="inspection-profiles-existing-profiles">default profiles</a>.</li>
                            <li><code>Embedded profile</code> lets you select a default profile, see the <a href="inspection-profiles.md" anchor="inspection-profiles-existing-profiles"/> section for details.</li>
                            <li><code>Path to the IntelliJ profile</code> lets you specify the path to your <a href="inspection-profiles.md" anchor="inspection-profiles-custom-profiles">custom profile</a>. To use this option,
                                make sure that you also configure the custom profile in the <a href="inspection-profiles.md" anchor="inspection-profiles-yaml-file"><code>qodana.yaml</code></a> file.</li>
                        </list>
                    </li>
                    <li><ui-path>Cloud Token</ui-path> configures a <a href="project-token.md">project token</a> generated in Qodana Cloud. </li>
                    <li>
                        <ui-path>Additional Docker arguments</ui-path> configures the arguments accepted by a Docker image, see the <a href="docker-image-configuration.topic"/> section for details.
                    </li>
                    <li>
                        <p><ui-path>Additional Qodana arguments</ui-path> lets you extend the default Qodana functionality, see the
                            <a href="docker-image-configuration.topic" anchor="docker-config-reference-option-overview"/> section for details.</p>
                        <p filter="dotnet-no-build">In this field, specify the <code>--no-build</code> option.</p>
                        <p filter="baseline">In this field, specify the <a href="baseline.topic">baseline</a> feature using
                            the <code>--baseline &lt;path/to/qodana.sarif.json&gt;</code> option.</p>
                        <p filter="clang-compilation-override">
                            To override the location of a compilation command database, specify the location relatively to
                            the project root using the <code>--compile-commands &lt;path-to-compile_commands.json&gt;</code> command.
                        </p>
                    </li>
                </list>
                <img src="teamcity-runner.png" alt="Configuring the Qodana runner" width="680" border-effect="line"/>
            </step>
            <step>
                Click the <ui-path>Save</ui-path> button.
            </step>
        </procedure>
    </snippet>

    <snippet id="linters-linter-table">
        <p filter="jvm">Here, <code>&lt;linter-code&gt;</code> refers to one of the following linters:</p>
        <table filter="jvm">
            <tr>
                <td><code>&lt;linter-code&gt;</code> value</td>
                <td>Linter</td>
            </tr>
            <tr>
                <td><code>QDJVM</code></td>
                <td>Qodana for JVM</td>
            </tr>
            <tr>
                <td><code>QDJVMC</code></td>
                <td>Qodana Community for JVM</td>
            </tr>
        </table>
        <p filter="python">Here, <code>&lt;linter-code&gt;</code> refers to one of the following linters:</p>
        <table filter="python">
            <tr>
                <td><code>&lt;linter-code&gt;</code> value</td>
                <td>Linter</td>
            </tr>
            <tr>
                <td><code>QDPY</code></td>
                <td>Qodana for Python</td>
            </tr>
            <tr>
                <td><code>QDPYC</code></td>
                <td>Qodana Community for Python</td>
            </tr>
        </table>
    </snippet>

    <snippet id="linters-docker-image-table">
        <p filter="jvm">Here, <code>&lt;linter&gt;</code> refers to one of the following linters:</p>
        <list filter="jvm">
            <li><code>%qp-linter%</code></li>
            <li><code>%qp-co-linter%</code></li>
            <li><code>%qp-a-linter%</code></li>
            <li><code>%qp-an-linter%</code></li>
        </list>
    </snippet>

    <snippet id="before-start-qodana-cloud">
        <note filter="python">The %qp% linter requires a Qodana Cloud <a href="project-token.md">project token</a>.</note>
        <note filter="jvm">The %qp% and %qp-an% linters require a Qodana Cloud <a href="project-token.md">project token</a>.</note>
        <p filter="generic">Because the %qp% linter requires a Qodana Cloud <a href="project-token.md">project token</a> for
            identifying and verifying a <a href="pricing.md" anchor="pricing-linters-without-creating-cloud-account">license</a>, follow
        these steps to obtain it:</p>
        <p filter="clang">Because the %qp% linter may require a Qodana Cloud <a href="project-token.md">project token</a> for
            identifying and verifying a <a href="pricing.md" anchor="pricing-linters-without-creating-cloud-account">license</a>, follow
            these steps to obtain it:</p>
        <p filter="jvm">Depending on the specific linter you're using, you may need to obtain a project token that will be used by %product% for identifying and verifying a
            <a href="pricing.md" anchor="pricing-linters-without-creating-cloud-account">license</a>. To do this, follow the steps below:</p>
        <p filter="python">Depending on the specific linter you're using, you may need to obtain a project token that will be used by %product% for identifying and verifying a
            <a href="pricing.md" anchor="pricing-linters-without-creating-cloud-account">license</a>. To do this, follow the steps below:</p>
        <procedure>
            <step>
                Navigate to <a href="https://qodana.cloud">Qodana Cloud</a> and create an <a href="cloud-quickstart.md">account</a> there.
            </step>
            <step>
                In Qodana Cloud, create an <a href="cloud-organizations.topic">organization</a>, a <a href="cloud-teams.topic">team</a>,
                and a <a href="cloud-projects.topic">project</a>.
            </step>
            <step>
                On the <a href="cloud-projects.topic" anchor="cloud-manage-projects">project card</a>, you can find the <a href="project-token.md">project token</a>
                that you will be using further in this section.
            </step>
        </procedure>
    </snippet>

    <snippet id="before-start-prepare-software">

        <tabs group="software">
            <tab title="GitHub Actions" group-key="github">
                <procedure>
                    <step>On the <ui-path>Settings</ui-path> tab of the GitHub UI, create the <code>QODANA_TOKEN</code>
                        <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">encrypted secret</a>
                        and save the <a href="project-token.md">project token</a> as its value.
                    </step>
                    <step><p>On the <ui-path>Actions</ui-path> tab of the GitHub UI, set up a new workflow and save the
                        following workflow configuration to the <code>.github/workflows/code_quality.yml</code> file:</p>
                        <code-block lang="yaml" filter="generic">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches:
                                        - main
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with:
                                              args: --linter,%qp-linter%
                                          env:
                                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>
                        <code-block lang="yaml" filter="python">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches:
                                        - main
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with: # Specify the linter that you would like to run
                                              args: --linter,%qd-image%
                                          env:
                                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>
                        <code-block lang="yaml" filter="jvm">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches:
                                        - main
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with: # Uncomment the linter you wish to use
                                            # args: --linter,%qp-linter%
                                            # args: --linter,%qp-co-linter%
                                            # args: --linter,%qp-a-linter%
                                            # args: --linter,%qp-an-linter%
                                            env:
                                                QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>
                        <p>This configuration sample will be modified throughout the section.</p>
                    </step>
                </procedure>
            </tab>
            <tab title="Jenkins" group-key="jenkins">
                <procedure>
                    <step>
                        <p>In Jenkins, make sure that these plugins are up and running:</p>
                        <list>
                            <li><a href="%Dplugin%">Docker</a> and <a href="%DPplugin%">Docker Pipeline</a> are required for running Docker images,</li>
                            <li><a href="%Gplugin%">Git</a> is required for Git operations in Jenkins projects.</li>
                        </list>
                        <p>Make sure that Docker is installed and accessible to Jenkins.</p>
                        <p>If applicable, make sure that Docker is accessible to the <code>jenkins</code> user as described in the
                            <a href="%Dockeraccess%">Manage Docker as a non-root user</a> section of the Docker documentation.</p>
                    </step>
                    <step>In Jenkins, create the <code>qodana-token</code> <a href="https://www.jenkins.io/doc/book/using/using-credentials/">credential</a> and save the
                        <a href="project-token.md">project token</a> as its value.</step>
                    <step>
                        <p>In Jenkins, create a Multibranch Pipeline project as described on the <a href="%MultipipeCreate%">Jenkins documentation portal</a>.</p>
                    </step>
                </procedure>
            </tab>
            <tab title="GitLab CI/CD" group-key="gitlab">
                <procedure>
                    <step><p>Make sure that your project repository is accessible to GitLab CI/CD.</p></step>
                    <step>In GitLab CI/CD, create the <a href="https://docs.gitlab.com/ee/ci/variables/"><code>$qodana_token</code></a>
                        variable and save the <a href="project-token.md">project token</a> as its value.</step>
                </procedure>
            </tab>
            <tab title="TeamCity" group-key="teamcity">
                <p>In TeamCity, Create a
                    <a href="https://www.jetbrains.com/help/teamcity/configure-and-run-your-first-build.html#Create+your+first+project">project</a>
                    and a <a href="https://www.jetbrains.com/help/teamcity/creating-and-editing-build-configurations.html">build configuration</a>.</p>
            </tab>
            <tab title="Command line" group-key="command-line">
                <p>Install Docker on the machine you are going to run %product%.</p>
                <p>If you are using Linux, you should be able to run Docker under your current <a href="%non-root-user%">non-root user</a>.</p>
                <tabs group="cli-settings">
                    <tab group-key="qodana-cli" title="Qodana CLI">
                        <p>Follow the instructions from the
                            <a href="https://github.com/JetBrains/qodana-cli">Qodana CLI</a> page on GitHub.</p>
                    </tab>
                    <tab group-key="docker-image" title="Docker image">
                        <p filter="generic">Run this command to pull the Docker image of the %qp% linter:</p>
                        <p filter="python">Run the command to pull the Docker image of the %qp% or %qp-co% linter:</p>
                        <p filter="jvm">Run this command to pull the Docker image of a required linter:</p>

                        <code-block lang="shell" prompt="$" filter="generic">
                            docker pull %qp-linter%
                        </code-block>
                        <code-block lang="shell" prompt="$" filter="python">
                            docker pull %qd-image%
                        </code-block>
                        <code-block lang="shell" prompt="$" filter="jvm">
                            docker pull &lt;linter&gt;
                        </code-block>
                        <include from="lib_qd.topic" element-id="linters-docker-image-table"/>
                    </tab>
                </tabs>
            </tab>
        </tabs>
    </snippet>

    <snippet id="run-qodana">

        <note><include from="lib_qd.topic" element-id="docker-ram-note"/></note>

        <include from="lib_qd.topic" element-id="root-and-non-root-users-info-bubble"></include>

        <p>You can run the linters in two modes:</p>
        <list>
          <li><a href="native-mode.md">Native mode</a> is the recommended method that lets you run
            linters without using Docker containers,</li>
          <li>Container mode is an alternative that involves Docker containers.</li>
        </list>

        <note>
            Native mode is currently in Early Access, which means it may not be reliable, may not work as intended, and may contain errors.
        </note>

        <tabs group="native-container">
            <tab title="Native mode" group-key="native-mode">
                <p>The <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file is a universal method of
                     native mode configuration. Alternatively, you can configure it without using the
                    <code>qodana.yaml</code> file.</p>
                <tabs group="software">
                    <tab title="GitHub Actions + qodana.yaml" group-key="github-with-yaml">
                        <procedure>
                            <step>
                                <p>Save the following configuration in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
                                <list filter="jvm">
                                    <li><code>ide: QDJVM</code> for the %jvm% linter,</li>
                                    <li><code>ide: QDJVMC</code> for the %jvm-co% linter.</li>
                                </list>
                                <list filter="python">
                                    <li><code>ide: QDPY</code> for the %python% linter,</li>
                                    <li><code>ide: QDPYC</code> for the %python-co% linter.</li>
                                </list>
                                <code-block lang="yaml" filter="php">
                                    &nbsp;&nbsp;&nbsp;&nbsp;ide: QDPHP
                                </code-block>
                                <code-block lang="yaml" filter="js">
                                    &nbsp;&nbsp;&nbsp;&nbsp;ide: QDJS
                                </code-block>
                                <code-block lang="yaml" filter="golang">
                                    &nbsp;&nbsp;&nbsp;&nbsp;ide: QDGO
                                </code-block>
                            </step>
                            <step>
                                <p>You can run %product% using the <a href="https://github.com/marketplace/actions/qodana-scan">Qodana Scan GitHub action</a>.</p>
                                <p>To inspect the <code>main</code> branch, release branches and the pull requests coming
                                    to your repository in native mode, save this workflow configuration to the <code>.github/workflows/code_quality.yml</code> file:</p>
                                <code-block lang="yaml">
                                    name: Qodana
                                    on:
                                        workflow_dispatch:
                                        pull_request:
                                        push:
                                            branches: # Specify your branches here
                                                - main # The 'main' branch
                                                - 'releases/*' # The release branches
                                    jobs:
                                        qodana:
                                            runs-on: ubuntu-latest
                                            permissions:
                                                contents: write
                                                pull-requests: write
                                                checks: write
                                            steps:
                                                - uses: actions/checkout@v3
                                                  with:
                                                      ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                                      fetch-depth: 0  # a full history is required for pull request analysis
                                                - name: 'Qodana Scan'
                                                  uses: JetBrains/qodana-action@v2024.2
                                                  env:
                                                      QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                                </code-block>
                            </step>
                        </procedure>
                    </tab>
                    <tab title="GitHub Actions" group-key="github">
                        <p>You can run %product% using the <a href="https://github.com/marketplace/actions/qodana-scan">Qodana Scan GitHub action</a>.</p>
                        <p>To inspect the <code>main</code> branch, release branches and the pull requests coming
                            to your repository in native mode, save this workflow configuration to the <code>.github/workflows/code_quality.yml</code> file:</p>
                        <code-block lang="yaml">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches: # Specify your branches here
                                        - main # The 'main' branch
                                        - 'releases/*' # The release branches
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with:
                                              args: --ide,%native-arg%
                                          env:
                                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>
                        <include from="lib_qd.topic" element-id="linters-linter-table"/>
                        <p>More configuration examples are available in the <a href="github.md"/> section.</p>
                    </tab>
                    <tab title="Command line + qodana.yaml" group-key="command-line-with-yaml">
                        <procedure>
                        <step>
                            <p>Save the following configuration in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
                            <list filter="jvm">
                                <li><code>ide: QDJVM</code> for the %jvm% linter,</li>
                                <li><code>ide: QDJVMC</code> for the %jvm-co% linter.</li>
                            </list>
                            <list filter="python">
                                <li><code>ide: QDPY</code> for the %python% linter,</li>
                                <li><code>ide: QDPYC</code> for the %python-co% linter.</li>
                            </list>
                            <code-block lang="yaml" filter="php">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDPHP
                            </code-block>
                            <code-block lang="yaml" filter="js">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDJS
                            </code-block>
                            <code-block lang="yaml" filter="golang">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDGO
                            </code-block>
                        </step>
                        <step>
                            <p>Run this command in the project root directory:</p>
                            <code-block lang="shell" prompt="$">
                                qodana scan \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;qodana-cloud-token&gt;"
                            </code-block>
                            <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                                reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
                        </step>
                    </procedure>
                    </tab>
                    <tab title="Command line" group-key="command-line">
                        <p>Run this command in the project root directory:</p>
                        <code-block lang="shell" prompt="$">
                            qodana scan \
                            &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;qodana-cloud-token&gt;" \
                            &nbsp;&nbsp;&nbsp;--ide %native-arg%
                        </code-block>
                        <include from="lib_qd.topic" element-id="linters-linter-table"/>
                        <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                            reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
                    </tab>
                </tabs>
            </tab>
            <tab title="Container mode" group-key="container-mode">
                <p>Container mode is available for all linters; however, we recommend that you use native mode whenever possible.</p>
                <tabs group="software">
                    <tab title="GitHub Actions" group-key="github">
                        <p>To analyze the <code>main</code> branch, release branches and the pull requests coming
                            to your repository in container mode, save this workflow configuration to the <code>.github/workflows/code_quality.yml</code> file:</p>
                        <code-block lang="yaml" filter="generic">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches: # Specify your branches here
                                        - main # The 'main' branch
                                        - 'releases/*' # The release branches
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with:
                                              args: --linter,%qp-linter%
                                          env:
                                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>
                        <code-block lang="yaml" filter="python">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches: # Specify your branches here
                                        - main # The 'main' branch
                                        - 'releases/*' # The release branches
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with:
                                              args: --linter,%qd-image%
                                          env:
                                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>

                        <code-block lang="yaml" filter="jvm">
                            name: Qodana
                            on:
                                workflow_dispatch:
                                pull_request:
                                push:
                                    branches: # Specify your branches here
                                        - main # The 'main' branch
                                        - 'releases/*' # The release branches
                            jobs:
                                qodana:
                                    runs-on: ubuntu-latest
                                    permissions:
                                        contents: write
                                        pull-requests: write
                                        checks: write
                                    steps:
                                        - uses: actions/checkout@v3
                                          with:
                                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                              fetch-depth: 0  # a full history is required for pull request analysis
                                        - name: 'Qodana Scan'
                                          uses: JetBrains/qodana-action@v2024.2
                                          with: # Uncomment the linter that you wish to use
                                            # args: --linter,%qp-linter%
                                            # args: --linter,%qp-co-linter%
                                            # args: --linter,%qp-a-linter%
                                            # args: --linter,%qp-an-linter%
                                          env:
                                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                        </code-block>
                        <p>More configuration examples are available in the <a href="github.md"/> section.</p>
                    </tab>
                    <tab title="Jenkins" group-key="jenkins">
                        <p>Save this configuration to the <code>Jenkinsfile</code>:</p>
                        <code-block lang="groovy" filter="generic">
                            pipeline {
                            &nbsp;&nbsp;environment {
                            &nbsp;&nbsp;&nbsp;&nbsp;QODANA_TOKEN=credentials('qodana-token')
                            &nbsp;&nbsp;}
                            &nbsp;&nbsp;agent {
                            &nbsp;&nbsp;&nbsp;&nbsp;docker {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args '''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-v "${WORKSPACE}":/data/project
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--entrypoint=""
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image '%qp-linter%'
                            &nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;}
                            &nbsp;&nbsp;stages {
                            &nbsp;&nbsp;&nbsp;&nbsp;stage('Qodana') {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh '''qodana'''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;}
                            }
                        </code-block>
                        <code-block lang="groovy" filter="python">
                            pipeline {
                            &nbsp;&nbsp;environment {
                            &nbsp;&nbsp;&nbsp;&nbsp;QODANA_TOKEN=credentials('qodana-token')
                            &nbsp;&nbsp;}
                            &nbsp;&nbsp;agent {
                            &nbsp;&nbsp;&nbsp;&nbsp;docker {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args '''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-v "${WORKSPACE}":/data/project
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--entrypoint=""
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image '%qd-image%'
                            &nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;}
                            &nbsp;&nbsp;stages {
                            &nbsp;&nbsp;&nbsp;&nbsp;stage('Qodana') {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh '''qodana'''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;}
                            }
                        </code-block>
                        <code-block lang="groovy" filter="jvm">
                            pipeline {
                            &nbsp;&nbsp;environment {
                            &nbsp;&nbsp;&nbsp;&nbsp;QODANA_TOKEN=credentials('qodana-token')
                            &nbsp;&nbsp;}
                            &nbsp;&nbsp;agent {
                            &nbsp;&nbsp;&nbsp;&nbsp;docker {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args '''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-v "${WORKSPACE}":/data/project
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--entrypoint=""
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Uncomment the linter you would like to employ
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-linter%' // Qodana for JVM
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-co-linter%' // Qodana Community for JVM
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-a-linter%' // Qodana Community for Android
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-an-linter%' // Qodana for Android
                            &nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;}
                            &nbsp;&nbsp;stages {
                            &nbsp;&nbsp;&nbsp;&nbsp;stage('Qodana') {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps {
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh '''qodana'''
                            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;&nbsp;&nbsp;}
                            &nbsp;&nbsp;}
                            }
                        </code-block>
                        <p>More configuration examples are available in the <a href="jenkins.md"/>section.</p>
                    </tab>
                    <tab title="GitLab CI/CD" group-key="gitlab">
                        <p>In the root directory of your project, save this snippet to the <code>.gitlab-ci.yml</code> file:</p>
                        <code-block lang="yaml" filter="generic">
                            qodana:
                                image:
                                    name: %qp-linter%
                                    entrypoint: [""]
                                cache:
                                    - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                                      fallback_keys:
                                          - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                          - qodana-2024.2-
                                      paths:
                                          - .qodana/cache
                                variables:
                                    QODANA_TOKEN: $qodana_token           -
                                script:
                                    - qodana --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                        </code-block>
                        <code-block lang="yaml" filter="python">
                            qodana:
                                image:
                                    name: %qd-image%
                                    entrypoint: [""]
                                cache:
                                    - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                                      fallback_keys:
                                          - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                          - qodana-2024.2-
                                      paths:
                                          - .qodana/cache
                                variables:
                                    QODANA_TOKEN: $qodana_token           -
                                script:
                                    - qodana --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                        </code-block>
                        <code-block lang="yaml" filter="jvm">
                            qodana:
                                image:
                                    # Uncomment the linter you would like to employ
                                    # name: %qp-linter% # Qodana for JVM
                                    # name: %qp-co-linter% # Qodana Community for JVM
                                    # name: %qp-a-linter% # Qodana Community for Android
                                    # name: %qp-an-linter% # Qodana for Android
                                    entrypoint: [""]
                                cache:
                                    - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                                      fallback_keys:
                                          - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                          - qodana-2024.2-
                                      paths:
                                          - .qodana/cache
                                variables:
                                    QODANA_TOKEN: $qodana_token           -
                                script:
                                    - qodana --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                        </code-block>
                        <p>In this snippet:</p>
                        <list>
                            <li>The <a href="https://docs.gitlab.com/ee/ci/caching/"><code>cache</code></a> keyword configures GitLab CI/CD caches to store the %instance% cache,
                                so subsequent runs will be faster,</li>
                            <li>The <a href="https://docs.gitlab.com/ee/ci/yaml/#script"><code>script</code></a> keyword runs the <code>qodana</code> command and enumerates the %instance%
                                configuration options described in the <a href="docker-image-configuration.topic"/> section,</li>
                            <li>The <code>variables</code> keyword defines the <code>QODANA_TOKEN</code>
                                <a href="https://docs.gitlab.com/ee/ci/variables/#define-a-cicd-variable-in-the-ui">variable</a> referring to the
                                <a href="project-token.md">project token</a>.</li>
                        </list>
                        <p>More configuration examples are available in the <a href="gitlab.md"/>section.</p>
                    </tab>
                    <tab title="TeamCity" group-key="teamcity">
                        <include from="lib_qd.topic" element-id="teamcity-add-a-qodana-runner"/>
                        <p>More configuration examples are available in the <a href="teamcity.md"/>section.</p>
                    </tab>
                    <tab title="Command line" group-key="command-line">
                        <tabs group="cli-settings">
                            <tab title="Qodana CLI" group-key="qodana-cli">
                                <code-block lang="shell" prompt="$" filter="jvm">
                                    qodana scan \
                                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;qodana-cloud-token&gt;" \
                                    &nbsp;&nbsp;&nbsp;-l &lt;linter&gt;
                                </code-block>
                                <include from="lib_qd.topic" element-id="linters-docker-image-table"/>
                                <code-block lang="shell" prompt="$" filter="python">
                                    qodana scan \
                                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;qodana-cloud-token&gt;" \
                                    &nbsp;&nbsp;&nbsp;-l %qd-image%
                                </code-block>
                                <code-block lang="shell" prompt="$" filter="generic">
                                    qodana scan \
                                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;qodana-cloud-token&gt;" \
                                    &nbsp;&nbsp;&nbsp;-l %qp-linter%
                                </code-block>
                            </tab>
                            <tab title="Docker image" group-key="docker-image">
                                <code-block lang="shell" prompt="$" filter="jvm">
                                    docker run \
                                    &nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                    &nbsp;&nbsp;&nbsp;&lt;linter&gt;
                                </code-block>
                                <include filter="jvm" use-filter="jvm" from="lib_qd.topic" element-id="linters-docker-image-table"/>
                                <code-block lang="shell" prompt="$" filter="python">
                                    docker run \
                                    &nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                    &nbsp;&nbsp;&nbsp;%qd-image%
                                </code-block>
                                <code-block lang="shell" prompt="$" filter="generic">
                                    docker run \
                                    &nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                    &nbsp;&nbsp;&nbsp;%qp-linter%
                                </code-block>
                            </tab>
                        </tabs>
                        <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                            reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
                    </tab>
                    <tab title="JetBrains IDEs" group-key="ides">
                        <procedure>
                            <step>
                                <p>In %ide%, navigate to <ui-path>Tools | Qodana | Try Code Analysis with Qodana</ui-path>.</p>
                            </step>
                            <step>
                                <p>On the <ui-path>Run Qodana</ui-path> dialog, you can configure %product%.</p>
                                <img src="ide-plugin-run-qodana-2.png" width="793" alt="Configuring Qodana in the Run Qodana dialog" border-effect="line"/>
                                <p>This dialog contains the following components:</p>
                                <table>
                                    <tr>
                                        <td>Name</td>
                                        <td>Description</td>
                                    </tr>
                                    <tr>
                                        <td>The <code>qodana.yaml</code> file</td>
                                        <td>In the text field, you can set up code analysis used by Qodana in this file. You can learn more about available <a href="qodana-yaml.md">configuration options</a></td>
                                    </tr>
                                    <tr>
                                        <td>The <ui-path>Send inspection results to Qodana Cloud</ui-path> option</td>
                                        <td>If you want to <a href="cloud-forward-reports.topic">send reports to Qodana Cloud</a>, you can check this option and paste the <a href="project-token.md">project token</a> generated in <a href="cloud-projects.topic" anchor="cloud-manage-projects">Qodana Cloud</a></td>
                                    </tr>
                                    <tr>
                                        <td>The <ui-path>Save qodana.yaml in project root</ui-path> option</td>
                                        <td>By checking this option, you can save the %product% configuration made on this dialog to the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file in the project root of your project</td>
                                    </tr>
                                    <tr>
                                        <td>The <ui-path>Use Qodana analysis baseline</ui-path> option</td>
                                        <td>Using the <a href="baseline.topic">baseline</a> feature, you can skip analysis for specific problems</td>
                                    </tr>
                                </table>
                                <p>Click <ui-path>Run</ui-path> for analyzing your code.</p>
                            </step>
                            <step>
                                <p>On the <ui-path>Server-Side Analysis</ui-path> tab of the <ui-path>Problems</ui-path> tool window, see the <a href="qodana-ide-plugin.md" anchor="ide-plugin-study-reports">inspection results</a>.</p>
                            </step>
                        </procedure>
                    </tab>
                </tabs>
            </tab>
        </tabs>
    </snippet>

    <snippet id="explore-analysis-results">

        <tabs group="software">
            <tab title="JetBrains IDEs" group-key="ides">
                <p>You can load the latest %instance% report from Qodana Cloud to your IDE as explained below.</p>
                <procedure>
                    <step>
                        <p>In your IDE, navigate to <ui-path>Tools | Qodana | Log in to Qodana</ui-path>.</p>
                    </step>
                    <step>
                        <p>
                            On the <ui-path>Settings</ui-path> dialog, click <ui-path>Log in</ui-path>.
                        </p>
                        <img src="ide-plugin-connect-1.png" dark-src="ide-plugin-connect-1_dark.png" width="706" alt="Connecting to Qodana Cloud" border-effect="line"/>
                        <p>This will redirect you to the authentication page.</p>
                    </step>
                    <step>
                        <p>Select the <a href="cloud-projects.topic">Qodana Cloud project</a> to link your local project with.</p>
                        <img src="ide-plugin-connect-2.png" dark-src="ide-plugin-connect-2_dark.png" width="706" alt="Linking the project to Qodana Cloud" border-effect="line"/>
                    </step>
                    <step>
                        <p>If you check the <ui-path>Always load most relevant Qodana report</ui-path> option, you will
                            be able to receive the most up-to-date and relevant reports from Qodana Cloud.</p>
                        <img src="ide-plugin-connect-3.png" dark-src="ide-plugin-connect-3_dark.png" width="706" alt="Enabling to load the most relevant reports" border-effect="line"/>
                        <p>In this case, the IDE will search Qodana Cloud and fetch the report with the revision ID
                            corresponding to the current revision ID (HEAD). If this report is not found, the IDE will
                            select the previous report with the revision ID closest to the current revision ID (HEAD).
                            Otherwise, the IDE retrieves the latest available report from Qodana Cloud.</p>
                    </step>
                    <step>
                        <p>On the <ui-path>Server-Side Analysis</ui-path> tab of the <ui-path>Problems</ui-path> tool window, you can view the <a href="qodana-ide-plugin.md" anchor="ide-plugin-study-reports">analysis results</a>.</p>
                    </step>
                </procedure>
            </tab>
            <tab title="Qodana Cloud" group-key="cloud">
                <p>After %product% analyzed your project and uploaded the analysis results to Qodana Cloud, in
                    <a href="https://qodana.cloud">Qodana Cloud</a> navigate to your project and review the analysis results report.</p>
                <img filter="php" src="qc-report-example-php.png" alt="Analysis report example" width="720" border-effect="line"/>
                <img filter="js" src="qc-report-example-js.png" alt="Analysis report example" width="720" border-effect="line"/>
                <img filter="golang" src="qc-report-example-golang.png" alt="Analysis report example" width="720" border-effect="line"/>
                <img filter="jvm" src="qc-report-example-jvm.png" alt="Analysis report example" width="720" border-effect="line"/>
                <img filter="python" src="qc-report-example.png" alt="Analysis report example" width="720" border-effect="line"/>
                <p>To learn more about %instance% report UI, see the <a href="ui-overview.md"/> section.</p>
            </tab>
        </tabs>

    </snippet>

    <!-- The Adjusting the scope of analysis section -->
    <snippet id="adjust-scope-of-analysis">

        <p>Out of the box, Qodana provides two
            <a href="inspection-profiles.md" anchor="inspection-profiles-existing-profiles">predefined profiles</a> hosted on
            <a href="https://github.com/JetBrains/qodana-profiles/tree/master/.idea/inspectionProfiles">GitHub</a>:
        </p>
        <list>
            <li><code>qodana.starter</code> is the default profile and a subset of the more comprehensive <code>qodana.recommended</code> profile.</li>
            <li><code>qodana.recommended</code>is suitable for running in CI/CD pipelines and mostly implements the default %ide%
                profile; see the <a href="%ide-documentation%">%ide%</a> documentation for details.</li>
        </list>

        <p>You can customize %product% profiles using configurations in <a href="custom-profiles.md">YAML</a> and
            <a href="custom-xml-profiles.md">XML</a> formats. To learn more about configuration basics, visit the
            <a href="override-a-profile.md"/> section of the documentation.
        </p>

    </snippet>

    <snippet id="enabling-baseline">

        <p>You can skip analysis for specific problems by using the <a href="baseline.topic">baseline</a> feature. Information
            about a baseline is contained in a SARIF-formatted file.</p>

        <tabs group="native-container">
          <tab title="Native mode" group-key="native-mode">
              <tabs group="software">
                  <tab title="GitHub Actions + qodana.yaml" group-key="github-with-yaml">
                      <procedure>
                          <step>
                              <p>Save the following configuration in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
                              <list filter="jvm">
                                  <li><code>ide: QDJVM</code> for the %jvm% linter,</li>
                                  <li><code>ide: QDJVMC</code> for the %jvm-co% linter.</li>
                              </list>
                              <list filter="python">
                                  <li><code>ide: QDPY</code> for the %python% linter,</li>
                                  <li><code>ide: QDPYC</code> for the %python-co% linter.</li>
                              </list>
                              <code-block lang="yaml" filter="php">
                                  &nbsp;&nbsp;&nbsp;&nbsp;ide: QDPHP
                              </code-block>
                              <code-block lang="yaml" filter="js">
                                  &nbsp;&nbsp;&nbsp;&nbsp;ide: QDJS
                              </code-block>
                              <code-block lang="yaml" filter="golang">
                                  &nbsp;&nbsp;&nbsp;&nbsp;ide: QDGO
                              </code-block>
                          </step>
                          <step>
                              <p>Save the snippet to the <code>.github/workflows/code_quality.yml</code> file containing the
                                  <code>args: --baseline,qodana.sarif.json</code> option that specifies the path to the
                                  SARIF-formatted baseline file:</p>
                              <code-block lang="yaml">
                                  name: Qodana
                                  on:
                                      workflow_dispatch:
                                      pull_request:
                                      push:
                                          branches: # Specify your branches here
                                              - main # The 'main' branch
                                              - 'releases/*' # The release branches
                                  jobs:
                                      qodana:
                                          runs-on: ubuntu-latest
                                          permissions:
                                              contents: write
                                              pull-requests: write
                                              checks: write
                                          steps:
                                              - uses: actions/checkout@v3
                                                with:
                                                    ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                                    fetch-depth: 0  # a full history is required for pull request analysis
                                              - name: 'Qodana Scan'
                                                uses: JetBrains/qodana-action@v2024.2
                                                env:
                                                    QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                              </code-block>
                          </step>
                      </procedure>
                  </tab>
                  <tab title="GitHub Actions" group-key="github">
                    <p>Save the snippet to the <code>.github/workflows/code_quality.yml</code> file containing the
                        <code>args: --baseline,qodana.sarif.json</code> option that specifies the path to the
                        SARIF-formatted baseline file:</p>
                    <code-block lang="yaml">
                        name: Qodana
                        on:
                          workflow_dispatch:
                          pull_request:
                          push:
                            branches: # Specify your branches here
                              - main # The 'main' branch
                              - master # The 'master' branch
                              - 'releases/*' # The release branches
                        jobs:
                          qodana:
                            runs-on: ubuntu-latest
                            permissions:
                              contents: write
                              pull-requests: write
                              checks: write
                            steps:
                              - uses: actions/checkout@v3
                                with:
                                  ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                  fetch-depth: 0  # a full history is required for pull request analysis
                              - name: 'Qodana Scan'
                                uses: JetBrains/qodana-action@v2024.2
                                with:
                                  args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--ide,%native-arg%
                                env:
                                  QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                    </code-block>
                      <include from="lib_qd.topic" element-id="linters-linter-table"/>
                  </tab>
                  <tab title="Command line + qodana.yaml" group-key="command-line-with-yaml">
                      <procedure>
                          <step>
                              <p>Save the following configuration in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
                              <list filter="jvm">
                                  <li><code>ide: QDJVM</code> for the %jvm% linter,</li>
                                  <li><code>ide: QDJVMC</code> for the %jvm-co% linter.</li>
                              </list>
                              <list filter="python">
                                  <li><code>ide: QDPY</code> for the %python% linter,</li>
                                  <li><code>ide: QDPYC</code> for the %python-co% linter.</li>
                              </list>
                              <code-block lang="yaml" filter="php">
                                  &nbsp;&nbsp;&nbsp;&nbsp;ide: QDPHP
                              </code-block>
                              <code-block lang="yaml" filter="js">
                                  &nbsp;&nbsp;&nbsp;&nbsp;ide: QDJS
                              </code-block>
                              <code-block lang="yaml" filter="golang">
                                  &nbsp;&nbsp;&nbsp;&nbsp;ide: QDGO
                              </code-block>
                          </step>
                          <step>
                              <p>Run this command in the project root directory using the
                                  <code>--baseline,&lt;path/to/qodana.sarif.json&gt;</code> option to specify the path to a
                                  SARIF-formatted file containing a baseline:</p>
                              <code-block lang="shell" prompt="$">
                                  qodana scan \
                                  &nbsp;&nbsp;-e QODANA_TOKEN="&lt;qodana-cloud-token&gt;" \
                                  &nbsp;&nbsp;&nbsp;--baseline &lt;path/to/qodana.sarif.json&gt;
                              </code-block>
                              <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                                  reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
                          </step>
                      </procedure>
                  </tab>
                  <tab title="Command line" group-key="command-line">
                      <p>Run this command in the project root directory using the
                          <code>--baseline,&lt;path/to/qodana.sarif.json&gt;</code> option to specify the path to a
                          SARIF-formatted file containing a baseline:</p>
                      <code-block lang="shell" prompt="$">
                          qodana scan \
                          &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                          &nbsp;&nbsp;&nbsp;--ide %native-arg% \
                          &nbsp;&nbsp;&nbsp;--baseline &lt;path/to/qodana.sarif.json&gt;
                      </code-block>
                      <include from="lib_qd.topic" element-id="linters-linter-table"/>
                <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                  reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
                  </tab>
              </tabs>
          </tab>
          <tab title="Container mode" group-key="container-mode">
        <tabs group="software">
            <tab title="GitHub Actions" group-key="github">
                <p>Save this snippet to the <code>.github/workflows/code_quality.yml</code> file containing the
                    <code>args: --baseline,qodana.sarif.json</code> option that specifies the path to the
                    SARIF-formatted baseline file:</p>
                <code-block lang="yaml" filter="jvm">
                    name: Qodana
                    on:
                        workflow_dispatch:
                        pull_request:
                        push:
                            branches: # Specify your branches here
                                - main # The 'main' branch
                                - master # The 'master' branch
                                - 'releases/*' # The release branches
                    jobs:
                        qodana:
                            runs-on: ubuntu-latest
                            permissions:
                                contents: write
                                pull-requests: write
                                checks: write
                            steps:
                                - uses: actions/checkout@v3
                                  with:
                                      ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                      fetch-depth: 0  # a full history is required for pull request analysis
                                - name: 'Qodana Scan'
                                  uses: JetBrains/qodana-action@v2024.2
                                  with: # Uncomment the linter that you wish to use
                                      # args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--linter,%qp-linter%
                                      # args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--linter,%qp-co-linter%
                                      # args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--linter,%qp-a-linter%
                                      # args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--linter,%qp-an-linter%
                                  env:
                                      QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                </code-block>
                <code-block lang="yaml" filter="python">
                    name: Qodana
                    on:
                        workflow_dispatch:
                        pull_request:
                        push:
                            branches: # Specify your branches here
                                - main # The 'main' branch
                                - master # The 'master' branch
                                - 'releases/*' # The release branches
                    jobs:
                        qodana:
                            runs-on: ubuntu-latest
                            permissions:
                                contents: write
                                pull-requests: write
                                checks: write
                            steps:
                                - uses: actions/checkout@v3
                                  with:
                                      ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                      fetch-depth: 0  # a full history is required for pull request analysis
                                - name: 'Qodana Scan'
                                  uses: JetBrains/qodana-action@v2024.2
                                  with:
                                      args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--linter,%qd-image%
                                  env:
                                      QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                </code-block>
                <code-block lang="yaml" filter="generic">
                    name: Qodana
                    on:
                        workflow_dispatch:
                        pull_request:
                        push:
                            branches: # Specify your branches here
                                - main # The 'main' branch
                                - master # The 'master' branch
                                - 'releases/*' # The release branches
                    jobs:
                        qodana:
                            runs-on: ubuntu-latest
                            permissions:
                                contents: write
                                pull-requests: write
                                checks: write
                            steps:
                                - uses: actions/checkout@v3
                                  with:
                                      ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                      fetch-depth: 0  # a full history is required for pull request analysis
                                - name: 'Qodana Scan'
                                  uses: JetBrains/qodana-action@v2024.2
                                  with:
                                      args: --baseline,&lt;path/to/qodana.sarif.json&gt;,--linter,%qp-linter%
                                  env:
                                      QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                </code-block>
            </tab>
            <tab title="Jenkins" group-key="jenkins">
                <p>In the <code>Jenkinsfile</code>, save the configuration containing the
                    <code>--baseline &lt;path/to/qodana.sarif.json&gt;</code> line that specifies the path to the SARIF-formatted baseline file:</p>
                <code-block lang="groovy" filter="jvm">
                    pipeline {
                    &nbsp;&nbsp;environment {
                    &nbsp;&nbsp;&nbsp;&nbsp;QODANA_TOKEN=credentials('qodana-token')
                    &nbsp;&nbsp;}
                    &nbsp;&nbsp;agent {
                    &nbsp;&nbsp;&nbsp;&nbsp;docker {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args '''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-v "${WORKSPACE}":/data/project
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--entrypoint=""
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Uncomment the linter you would like to employ
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-linter%' // Qodana for JVM
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-co-linter%' // Qodana Community for JVM
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-a-linter%' // Qodana Community for Android
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// image '%qp-an-linter%' // Qodana for Android
                    &nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;}
                    &nbsp;&nbsp;stages {
                    &nbsp;&nbsp;&nbsp;&nbsp;stage('Qodana') {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh '''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qodana \
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--baseline &lt;path/to/qodana.sarif.json&gt;
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;}
                    }
                </code-block>
                <code-block lang="groovy" filter="python">
                    pipeline {
                    &nbsp;&nbsp;environment {
                    &nbsp;&nbsp;&nbsp;&nbsp;QODANA_TOKEN=credentials('qodana-token')
                    &nbsp;&nbsp;}
                    &nbsp;&nbsp;agent {
                    &nbsp;&nbsp;&nbsp;&nbsp;docker {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args '''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-v "${WORKSPACE}":/data/project
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--entrypoint=""
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image '%qd-image%'
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;}
                    &nbsp;&nbsp;stages {
                    &nbsp;&nbsp;&nbsp;&nbsp;stage('Qodana') {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh '''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qodana \
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--baseline &lt;path/to/qodana.sarif.json&gt;
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;}
                    }
                </code-block>
                <code-block lang="groovy" filter="generic">
                    pipeline {
                    &nbsp;&nbsp;environment {
                    &nbsp;&nbsp;&nbsp;&nbsp;QODANA_TOKEN=credentials('qodana-token')
                    &nbsp;&nbsp;}
                    &nbsp;&nbsp;agent {
                    &nbsp;&nbsp;&nbsp;&nbsp;docker {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;args '''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-v "${WORKSPACE}":/data/project
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--entrypoint=""
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image '%qp-linter%'
                    &nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;}
                    &nbsp;&nbsp;stages {
                    &nbsp;&nbsp;&nbsp;&nbsp;stage('Qodana') {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps {
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sh '''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qodana \
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--baseline &lt;path/to/qodana.sarif.json&gt;
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'''
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;&nbsp;&nbsp;}
                    &nbsp;&nbsp;}
                    }
                </code-block>
            </tab>
            <tab title="GitLab CI/CD" group-key="gitlab">
                <p filter="jvm">In the root directory of your project, save this snippet to the <code>.gitlab-ci.yml</code> file and
                    uncomment the linter that you would like to employ:</p>
                <code-block lang="yaml" filter="jvm">
                    qodana:
                        image:
                            # Uncomment the linter you would like to employ
                            # name: %qp-linter% # Qodana for JVM
                            # name: %qp-co-linter% # Qodana Community for JVM
                            # name: %qp-a-linter% # Qodana Community for Android
                            # name: %qp-an-linter% # Qodana for Android
                            entrypoint: [""]
                        cache:
                            - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                              fallback_keys:
                                  - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                  - qodana-2024.2-
                              paths:
                                  - .qodana/cache
                        variables:
                            QODANA_TOKEN: $qodana_token           -
                        script:
                            - qodana --baseline &lt;path/to/qodana.sarif.json&gt; --results-dir=$CI_PROJECT_DIR/.qodana/results
                                --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                </code-block>
                <p filter="python">In the root directory of your project, save this snippet to the <code>.gitlab-ci.yml</code> file:</p>
                <code-block lang="yaml" filter="python">
                    qodana:
                        image:
                            name: %qd-image%
                            entrypoint: [""]
                        cache:
                            - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                              fallback_keys:
                                  - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                  - qodana-2024.2-
                              paths:
                                  - .qodana/cache
                        variables:
                            QODANA_TOKEN: $qodana_token           -
                        script:
                            - qodana --baseline &lt;path/to/qodana.sarif.json&gt; --results-dir=$CI_PROJECT_DIR/.qodana/results
                                --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                </code-block>
                <p filter="generic">In the root directory of your project, save this snippet to the <code>.gitlab-ci.yml</code> file:</p>
                <code-block lang="yaml" filter="generic">
                    qodana:
                        image:
                            name: %qp-linter%
                            entrypoint: [""]
                        cache:
                            - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                              fallback_keys:
                                  - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                  - qodana-2024.2-
                              paths:
                                  - .qodana/cache
                        variables:
                            QODANA_TOKEN: $qodana_token           -
                        script:
                            - qodana --baseline &lt;path/to/qodana.sarif.json&gt; --results-dir=$CI_PROJECT_DIR/.qodana/results
                                --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                </code-block>
                <p>The <code>--baseline &lt;path/to/qodana.sarif.json&gt;</code> line in the <code>script</code> block invokes the
                    baseline feature.</p>
            </tab>
            <tab title="TeamCity" group-key="teamcity">
                <include from="lib_qd.topic" element-id="teamcity-add-a-qodana-runner" use-filter="empty,baseline"/>
            </tab>
            <tab title="Command line" group-key="command-line">
                <p>Choose how you would like to run the baseline feature from the command line:</p>
                <tabs group="cli-settings">
                    <tab group-key="qodana-cli" title="Qodana CLI">
                        <code-block lang="shell" prompt="$" filter="jvm">
                            qodana scan \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;path_to_baseline&gt;:/data/base/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                            &nbsp;&nbsp;&nbsp;&nbsp;-l &lt;linter&gt; \
                            &nbsp;&nbsp;&nbsp;&nbsp;--baseline /data/base/&lt;path-relative-to-project-dir&gt;/qodana.sarif.json
                        </code-block>
                        <include from="lib_qd.topic" element-id="linters-docker-image-table"/>
                        <code-block lang="shell" prompt="$" filter="python">
                            qodana scan \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;path_to_baseline&gt;:/data/base/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                            &nbsp;&nbsp;&nbsp;&nbsp;-l %qd-image% \
                            &nbsp;&nbsp;&nbsp;&nbsp;--baseline /data/base/&lt;path-relative-to-project-dir&gt;/qodana.sarif.json
                        </code-block>
                        <code-block lang="shell" prompt="$" filter="generic">
                            qodana scan \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;path_to_baseline&gt;:/data/base/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                            &nbsp;&nbsp;&nbsp;&nbsp;-l %qp-linter% \
                            &nbsp;&nbsp;&nbsp;&nbsp;--baseline /data/base/&lt;path-relative-to-project-dir&gt;/qodana.sarif.json
                        </code-block>
                    </tab>
                    <tab group-key="docker-image" title="Docker image">
                        <code-block lang="shell" prompt="$" filter="jvm">
                            docker run \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;path_to_baseline&gt;:/data/base/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                            &nbsp;&nbsp;&nbsp;&nbsp;&lt;linter&gt; \
                            &nbsp;&nbsp;&nbsp;&nbsp;--baseline /data/base/&lt;path-relative-to-project-dir&gt;/qodana.sarif.json
                        </code-block>
                        <include filter="jvm" use-filter="jvm" from="lib_qd.topic" element-id="linters-docker-image-table"/>
                        <code-block lang="shell" prompt="$" filter="python">
                            docker run \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;path_to_baseline&gt;:/data/base/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                            &nbsp;&nbsp;&nbsp;&nbsp;%qd-image% \
                            &nbsp;&nbsp;&nbsp;&nbsp;--baseline /data/base/&lt;path-relative-to-project-dir&gt;/qodana.sarif.json
                        </code-block>
                        <code-block lang="shell" prompt="$" filter="generic">
                            docker run \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-v &lt;path_to_baseline&gt;:/data/base/ \
                            &nbsp;&nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                            &nbsp;&nbsp;&nbsp;&nbsp;%qp-linter% \
                            &nbsp;&nbsp;&nbsp;&nbsp;--baseline /data/base/&lt;path-relative-to-project-dir&gt;/qodana.sarif.json
                        </code-block>
                    </tab>
                </tabs>
            </tab>
            <tab title="JetBrains IDEs" group-key="ides">
                <procedure>
                    <step>In your IDE, navigate to the <ui-path>Problems</ui-path> tool window. </step>
                    <step>In the <ui-path>Problems</ui-path> tool window, click the <ui-path>Server-Side Analysis</ui-path> tab.</step>
                    <step>On the <ui-path>Server-Side Analysis</ui-path> tab, click the <ui-path>Try Locally</ui-path> button.</step>
                    <step>On the dialog that opens, expand the <ui-path>Advanced configuration</ui-path> section and specify the path to the baseline file, and then click <ui-path>Run</ui-path>.</step>
                </procedure>
            </tab>
        </tabs>
        </tab>
        </tabs>
    </snippet>

    <snippet id="enabling-quality-gate">

        <p>You can configure <a href="quality-gate.topic">quality gates</a> for:</p>
        <list>
            <li>The total number of project problems,</li>
            <li>Multiple quality gates for <a href="faq.topic" anchor="faq-severities">problem severities</a>,</li>
            <li><a href="code-coverage.md">Code coverage</a> thresholds.</li>
        </list>
        <p>Save this snippet to the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
        <code-block lang="yaml">
            failureConditions:
                severityThresholds:
                    any: 50 # Total number of problems in all severities
                    critical: 1 # Severities
                    high: 2
                    moderate: 3
                    low: 4
                    info: 5
                testCoverageThresholds:
                    fresh: 6 # Fresh code coverage
                    total: 7 # Total percentage
        </code-block>
    </snippet>

    <snippet id="analyzing-pull-requests">
        <tabs group="native-container">
          <tab title="Native mode" group-key="native-mode">
            <tabs group="software">
              <tab title="GitHub Actions + qodana.yaml" group-key="github-with-yaml">
                    <procedure>
                        <step>
                            <p>Save the following configuration in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
                            <list filter="jvm">
                                <li><code>ide: QDJVM</code> for the %jvm% linter,</li>
                                <li><code>ide: QDJVMC</code> for the %jvm-co% linter.</li>
                            </list>
                            <list filter="python">
                                <li><code>ide: QDPY</code> for the %python% linter,</li>
                                <li><code>ide: QDPYC</code> for the %python-co% linter.</li>
                            </list>
                            <code-block lang="yaml" filter="php">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDPHP
                            </code-block>
                            <code-block lang="yaml" filter="js">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDJS
                            </code-block>
                            <code-block lang="yaml" filter="golang">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDGO
                            </code-block>
                        </step>
                        <step>
                            <p>
                                The <a href="https://github.com/marketplace/actions/qodana-scan">Qodana Scan GitHub action</a> automatically
                                analyzes all pull requests, so you do not have to provide any additional configuration. Save this configuration
                                to the <code>.github/workflows/code_quality.yml</code> file:
                            </p>
                            <code-block lang="yaml">
                                name: Qodana
                                on:
                                    workflow_dispatch:
                                    pull_request:
                                    push:
                                        branches: # Specify your branches here
                                            - main # The 'main' branch
                                            - 'releases/*' # The release branches
                                jobs:
                                    qodana:
                                        runs-on: ubuntu-latest
                                        permissions:
                                            contents: write
                                            pull-requests: write
                                            checks: write
                                        steps:
                                            - uses: actions/checkout@v3
                                              with:
                                                  ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                                  fetch-depth: 0  # a full history is required for pull request analysis
                                            - name: 'Qodana Scan'
                                              uses: JetBrains/qodana-action@v2024.2
                                              env:
                                                  QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                            </code-block>
                        </step>
                    </procedure>
                </tab>
              <tab title="GitHub Actions" group-key="github">
                  <p>
                      The <a href="https://github.com/marketplace/actions/qodana-scan">Qodana Scan GitHub action</a> automatically
                      analyzes all pull requests, so you do not have to provide any additional configuration. Save this configuration
                      to the <code>.github/workflows/code_quality.yml</code> file:
                  </p>
                    <code-block lang="yaml">
                        name: Qodana
                        on:
                          workflow_dispatch:
                          pull_request:
                          push:
                            branches: # Specify your branches here
                              - main # The 'main' branch
                              - master # The 'master' branch
                              - 'releases/*' # The release branches
                        jobs:
                          qodana:
                            runs-on: ubuntu-latest
                            permissions:
                              contents: write
                              pull-requests: write
                              checks: write
                            steps:
                              - uses: actions/checkout@v3
                                with:
                                  ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                  fetch-depth: 0  # a full history is required for pull request analysis
                              - name: 'Qodana Scan'
                                uses: JetBrains/qodana-action@v2024.2
                                with:
                                  args: --ide,%native-arg%
                                env:
                                  QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                    </code-block>
                  <include from="lib_qd.topic" element-id="linters-linter-table"/>
              </tab>
              <tab title="Command line + qodana.yaml" group-key="command-line-with-yaml">
                    <procedure>
                        <step>
                            <p>Save the following configuration in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file:</p>
                            <list filter="jvm">
                                <li><code>ide: QDJVM</code> for the %jvm% linter,</li>
                                <li><code>ide: QDJVMC</code> for the %jvm-co% linter.</li>
                            </list>
                            <list filter="python">
                                <li><code>ide: QDPY</code> for the %python% linter,</li>
                                <li><code>ide: QDPYC</code> for the %python-co% linter.</li>
                            </list>
                            <code-block lang="yaml" filter="php">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDPHP
                            </code-block>
                            <code-block lang="yaml" filter="js">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDJS
                            </code-block>
                            <code-block lang="yaml" filter="golang">
                                &nbsp;&nbsp;&nbsp;&nbsp;ide: QDGO
                            </code-block>
                        </step>
                        <step>
                            <p>To analyze changes in your code, employ the <code>--diff-start</code> option and specify a hash of the commit that will
                                act as a base for comparison:</p>
                            <code-block lang="shell" prompt="$">
                                qodana scan \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                            <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                                reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
                        </step>
                    </procedure>
                </tab>
              <tab title="Command line" group-key="command-line">
                <p>To analyze changes in your code, employ the <code>--diff-start</code> option and specify a hash of the commit
                that will act as a base for comparison:</p>
                      <code-block lang="shell" prompt="$">
                          qodana scan \
                          &nbsp;&nbsp;&nbsp;--ide %native-arg% \
                          &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                          &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                      </code-block>
                      <include from="lib_qd.topic" element-id="linters-linter-table"/>
                <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine the analysis results and
                  reconfigure the analysis. See the <a href="ui-overview.md"/> section of the documentation for full details.</p>
              </tab>
            </tabs>
        </tab>
        <tab title="Container mode" group-key="container-mode">
            <tabs group="software">
                <tab title="GitHub Actions" group-key="github">
                    <p>
                        The <a href="https://github.com/marketplace/actions/qodana-scan">Qodana Scan GitHub action</a> automatically
                        analyzes all pull requests, so you do not have to provide any additional configuration. Save this configuration
                        to the <code>.github/workflows/code_quality.yml</code> file:
                    </p>
                    <code-block lang="yaml" filter="generic">
                        name: Qodana
                        on:
                            workflow_dispatch:
                            pull_request:
                            push:
                                branches: # Specify your branches here
                                    - main # The 'main' branch
                                    - 'releases/*' # The release branches
                        jobs:
                            qodana:
                                runs-on: ubuntu-latest
                                permissions:
                                    contents: write
                                    pull-requests: write
                                    checks: write
                                steps:
                                    - uses: actions/checkout@v3
                                      with:
                                          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                          fetch-depth: 0  # a full history is required for pull request analysis
                                    - name: 'Qodana Scan'
                                      uses: JetBrains/qodana-action@v2024.2
                                      with:
                                          args: --linter,%qp-linter%
                                      env:
                                          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                    </code-block>
                    <code-block lang="yaml" filter="python">
                        name: Qodana
                        on:
                            workflow_dispatch:
                            pull_request:
                            push:
                                branches: # Specify your branches here
                                    - main # The 'main' branch
                                    - 'releases/*' # The release branches
                        jobs:
                            qodana:
                                runs-on: ubuntu-latest
                                permissions:
                                    contents: write
                                    pull-requests: write
                                    checks: write
                                steps:
                                    - uses: actions/checkout@v3
                                      with:
                                          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                          fetch-depth: 0  # a full history is required for pull request analysis
                                    - name: 'Qodana Scan'
                                      uses: JetBrains/qodana-action@v2024.2
                                      with:
                                          args: --linter,%qd-image%
                                      env:
                                          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                    </code-block>
                    <code-block lang="yaml" filter="jvm">
                        name: Qodana
                        on:
                            workflow_dispatch:
                            pull_request:
                            push:
                                branches: # Specify your branches here
                                    - main # The 'main' branch
                                    - 'releases/*' # The release branches
                        jobs:
                            qodana:
                                runs-on: ubuntu-latest
                                permissions:
                                    contents: write
                                    pull-requests: write
                                    checks: write
                                steps:
                                    - uses: actions/checkout@v3
                                      with:
                                          ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                                          fetch-depth: 0  # a full history is required for pull request analysis
                                    - name: 'Qodana Scan'
                                      uses: JetBrains/qodana-action@v2024.2
                                      with: # Uncomment the linter you wish to use
                                        # args: --linter,%qp-linter%,--baseline,&lt;path/to/qodana.sarif.json&gt;
                                        # args: --linter,%qp-co-linter%,--baseline,&lt;path/to/qodana.sarif.json&gt;
                                        # args: --linter,%qp-a-linter%,--baseline,&lt;path/to/qodana.sarif.json&gt;
                                        # args: --linter,%qp-an-linter%,--baseline,&lt;path/to/qodana.sarif.json&gt;
                                      env:
                                          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                    </code-block>
                </tab>
                <tab title="GitLab CI/CD" group-key="gitlab">
                    <p>In the root directory of your project, save the <code>.gitlab-ci.yml</code> file containing the following snippet:</p>
                    <code-block lang="yaml" filter="generic">
                        qodana:
                            image:
                                name: %qp-linter%
                                entrypoint: [""]
                            cache:
                                - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                                  fallback_keys:
                                      - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                      - qodana-2024.2-
                                  paths:
                                      - .qodana/cache
                            variables:
                                QODANA_TOKEN: $qodana_token
                                script:
                                    - >
                                        qodana --diff-start=$CI_MERGE_REQUEST_TARGET_BRANCH_SHA \
                                          --results-dir=$CI_PROJECT_DIR/.qodana/results \
                                          --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                            artifacts:
                                paths:
                                    - .qodana/results
                                expose_as: 'Qodana report'
                    </code-block>
                    <code-block lang="yaml" filter="jvm">
                        qodana:
                            image:
                                # Uncomment the linter you would like to employ
                                # name: %qp-linter% # Qodana for JVM
                                # name: %qp-co-linter% # Qodana Community for JVM
                                # name: %qp-a-linter% # Qodana Community for Android
                                # name: %qp-an-linter% # Qodana for Android
                                entrypoint: [""]
                            cache:
                                - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                                  fallback_keys:
                                      - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                      - qodana-2024.2-
                                  paths:
                                      - .qodana/cache
                            variables:
                                QODANA_TOKEN: $qodana_token
                                script:
                                    - >
                                        qodana --diff-start=$CI_MERGE_REQUEST_TARGET_BRANCH_SHA \
                                          --results-dir=$CI_PROJECT_DIR/.qodana/results \
                                          --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                            artifacts:
                                paths:
                                    - .qodana/results
                                expose_as: 'Qodana report'
                    </code-block>
                    <code-block lang="yaml" filter="python">
                        qodana:
                            image:
                                name: %qd-image%
                                entrypoint: [""]
                            cache:
                                - key: qodana-2024.2-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG
                                  fallback_keys:
                                      - qodana-2024.2-$CI_DEFAULT_BRANCH-
                                      - qodana-2024.2-
                                  paths:
                                      - .qodana/cache
                            variables:
                                QODANA_TOKEN: $qodana_token
                                script:
                                    - >
                                        qodana --diff-start=$CI_MERGE_REQUEST_TARGET_BRANCH_SHA \
                                          --results-dir=$CI_PROJECT_DIR/.qodana/results \
                                          --cache-dir=$CI_PROJECT_DIR/.qodana/cache
                            artifacts:
                                paths:
                                    - .qodana/results
                                expose_as: 'Qodana report'
                    </code-block>

                    <p>Here, the <code>--diff-start</code> option specifies a hash of the commit that will act as a base for comparison.</p>
                </tab>
                <tab title="TeamCity" group-key="teamcity">
                    <p>Information about configuring TeamCity for analyzing pull and merge requests is available on the
                        <a href="%TeamCityPullRequests%">TeamCity</a> documentation portal.
                    </p>
                </tab>
                <tab title="Command line" group-key="command-line">
                    <p>To analyze changes in your code, employ the <code>--diff-start</code> option and specify a hash of the commit that will
                        act as a base for comparison:</p>
                    <tabs group="cli-settings">
                        <tab group-key="qodana-cli" title="Qodana CLI">
                            <code-block prompt="$" lang="shell" filter="generic">
                                qodana scan \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;-l %qp-linter% \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                            <code-block prompt="$" lang="shell" filter="jvm">
                                qodana scan \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;-l &lt;linter&gt; \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                            <include from="lib_qd.topic" element-id="linters-docker-image-table"/>
                            <code-block prompt="$" lang="shell" filter="python">
                                qodana scan \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;-l %qd-image% \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                        </tab>
                        <tab group-key="docker-image" title="Docker image">
                            <code-block lang="shell" prompt="$" filter="generic">
                                docker run \
                                &nbsp;&nbsp;&nbsp;-v $(pwd):/data/project/ \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;%qp-linter% \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                            <code-block lang="shell" prompt="$" filter="jvm">
                                docker run \
                                &nbsp;&nbsp;&nbsp;-v $(pwd):/data/project/ \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;&lt;linter&gt; \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                            <include from="lib_qd.topic" element-id="linters-docker-image-table"/>
                            <code-block lang="shell" prompt="$" filter="python">
                                docker run \
                                &nbsp;&nbsp;&nbsp;-v $(pwd):/data/project/ \
                                &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                                &nbsp;&nbsp;&nbsp;%qd-image% \
                                &nbsp;&nbsp;&nbsp;--diff-start=&lt;GIT_START_HASH&gt;
                            </code-block>
                        </tab>
                    </tabs>
                </tab>
            </tabs>
        </tab>
    </tabs>
</snippet>

</topic>
