<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/html-entities.dtd">
<!--suppress TopicContentShortcutHardcodedInspections -->

<topic 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
	id="lib_qd" title="Library of includes" is-library="true">

    <snippet id="docker-ram-note">
        Running analysis is a resource-intensive operation. If you experience issues, consider increasing the Docker
        Desktop runtime memory limit, which by default is set to 2 GB. See the Docker Desktop documentation for <a href="https://docs.docker.com/desktop/windows/#resources">Windows
    </a> and <a href="https://docs.docker.com/desktop/mac/#resources">Mac</a>.
    </snippet>

    <snippet id="linter-intro">
        It brings all the smarts from %ide%, which help you:
        <list>
            <li>detect anomalous code and probable bugs</li>
            <li>eliminate dead code</li>
            <li>highlight spelling problems</li>
            <li>improve overall code structure</li>
            <li>introduce coding best practices</li>
            <li>Upload inspection results to <a href="cloud-about.topic">Qodana Cloud</a></li>
        </list>
    </snippet>

    <snippet id="linter-docker-image-intro">
        <p>
            The Docker image for the <a href="%linter-page-url%">%linter%</a> linter is provided to support different usage
            scenarios:
        </p>
        <list>
            <li>Running analyses on a regular basis as part of your continuous integration (<i>CI-based execution</i>)
            </li>
            <li>Single-shot analyses (for example, performed <i>locally</i>).
            </li>
        </list>
        <p>If you are familiar with
            <a href="%code-inspection-ide-help-url%">%ide% code inspections</a>
            and know what to expect from the static analysis outside the editor, you can skip the following section and
            continue from <a anchor="Using+an+existing+profile">Using an existing profile</a>.
        </p>
        <p>If you are just starting in the field, we recommend proceeding with the <a anchor="quick-start-recommended-profile">default setup
        </a> we provide. You will see the
            results of the most common checks performed on your code base. Later, you can <a anchor="Configure+via+qodana.yaml">adjust them
            </a> to suit your needs better.
        </p>
        <p>You can run the %linter% linter using two methods.
            <a href="https://github.com/JetBrains/qodana-cli">Qodana CLI</a> is the easiest method. If necessary,
            check the <a href="https://github.com/JetBrains/qodana-cli/releases/latest">installation page</a> to install
            Qodana CLI. Alternatively, you can use the Docker commands from the <ui-path>Docker image</ui-path> tab.</p>
    </snippet>

    <snippet id="docker-local-analysis">
        <tabs group="cli-settings">
            <tab title="Docker image" group-key="docker-image">
                <procedure>
                    <step>
                        <p>
                            Pull the image from Docker Hub (only necessary to update to the <code>latest</code> version):
                        </p>
                        <code-block lang="shell" prompt="$">docker pull jetbrains/%linter-shell%
                        </code-block>
                    </step>
                    <step>
                        <p>Run the following command:</p>
                        <code-block lang="shell" prompt="$">
                            docker run \
                               -v &lt;source-directory&gt;/:/data/project/ \
                               -v &lt;output-directory&gt;/:/data/results/ \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               jetbrains/%linter-shell%
                        </code-block>
                        <p>
                            where <code>source-directory</code> and <code>output-directory</code> are full local paths to,
                            respectively, the project source code directory and the analysis results directory. The
                            <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                            required by the
                            <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters.
                        </p>
                    </step>
                </procedure>
                <p>This command will run the analysis on your source code and start the web server to provide a convenient
                    view of the results. Open <a href="https://qodana.cloud">Qodana Cloud</a> in your browser to examine
                    inspection results. Here you can also reconfigure the analysis. See the <a href="ui-overview.md"/> for details.</p>
                <p>If you don't need the user interface and prefer to review raw data, use the following command:</p>
                <code-block lang="shell" prompt="$">
                    docker run \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -v &lt;output-directory&gt;/:/data/results/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       jetbrains/%linter-shell%
                </code-block>
                <p>The <code>output-directory</code> will contain <a href="qodana-inspection-output.md" anchor="Basic+output">all the
                    necessary results</a>. You can further tune the command as described in the <a href="docker-image-configuration.topic">technical guide</a>.
                </p>
                <p>If you run the analysis several times in a row, make sure you've cleaned the results directory before
                    using it in <code>docker run</code> again.
                </p>

                <p filter="nuget-dotnet-only">You can run %linter% using private NuGet feeds:</p>
                <code-block filter="nuget-dotnet-only" lang="shell" prompt="$">
                    docker run \
                    &nbsp;&nbsp;&nbsp;-v &lt;source-directory&gt;/:/data/project/ \
                    &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                    &nbsp;&nbsp;&nbsp;-e QODANA_NUGET_URL=&lt;private-NuGet-feed-URL&gt; \
                    &nbsp;&nbsp;&nbsp;-e QODANA_NUGET_USER=&lt;login&gt; \
                    &nbsp;&nbsp;&nbsp;-e QODANA_NUGET_PASSWORD=&lt;plaintext-password&gt; \
                    &nbsp;&nbsp;&nbsp;-e QODANA_NUGET_NAME=&lt;name-of-private-NuGet-feed&gt; \
                    &nbsp;&nbsp;&nbsp;%docker-image% \
                    &nbsp;&nbsp;&nbsp;--show-report
                </code-block>
                <p filter="nuget-dotnet-only">Configuration examples for using private NuGet feeds are available on the
                    <a href="https://github.com/qodana/qodanaprivateFeed/">GitHub</a> website.</p>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <p>In the project root directory, run this command to inspect your code and view the inspection
                    report locally:</p>
                <code-block filter="non-gs" lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --show-report
                </code-block>
                <p>If you don't need the user interface and prefer to review raw data, use the following command:</p>
                <code-block lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --results-dir &lt;output-directory&gt;
                </code-block>
                <p>The <code>output-directory</code> specifies the directory where the SARIF-formatted report will be
                    saved. The <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                    required by the
                    <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters.</p>
            </tab>
        </tabs>
    </snippet>

    <snippet id="docker-ci-analysis">
        <tabs group="cli-settings">
            <tab title="Docker image" group-key="docker-image">
                <p>Use the following command as a task in a generic shell executor:</p>
                <code-block lang="shell" prompt="$">
                    docker run \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -v &lt;output-directory&gt;/:/data/results/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       jetbrains/%linter-shell%
                </code-block>
                <p>where <code>source-directory</code> and <code>output-directory</code> are full paths to, respectively,
                    the project source code directory and the <a href="qodana-inspection-output.md" anchor="Basic+output">analysis
                        results directory</a>. The <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>
                    required by the
                    <a href="pricing.md" anchor="pricing-linters-licenses">Ultimate and Ultimate Plus</a> linters.
                </p>
                <p>Consider using the <a href="quality-gate.topic"/> feature to make the build fail when a certain number
                    of problems is reached and the <a href="baseline.topic"/> feature to compare each new %linter%
                    run to some initial run selected as a <emphasis>baseline</emphasis>.
                    <a anchor="docker-config-reference-docker-environment-run-non-root" href="docker-image-configuration.topic">Running as non-root</a> is also supported.
                </p>
                <tip>
                    <p>
                        For details on available CI integrations, see <a href="ci.md"/>.
                    </p>
                </tip>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <p>Run this command in the project root directory:</p>
                <code-block lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --results-dir &lt;output-directory&gt;
                </code-block>
                <p>This will save inspection results to the directory specified by <code>output-directory</code>.</p>
                <p>You can also apply the <a href="quality-gate.topic"/> feature to make the build fail when a certain number
                    of problems is reached by using the <code>--fail-threshold</code>
                    <a href="https://github.com/JetBrains/qodana-cli#options-1">option</a>.</p>
                <p>The <a href="baseline.topic"/> feature compares each new %linter% run to some initial run using
                    the <code>--baseline</code> and
                    <code>--baseline-include-absent</code> options.
                </p>
                <tip>
                    <p>
                        For details on available CI integrations, see <a href="ci.md"/>.
                    </p>
                </tip>

            </tab>
        </tabs>
    </snippet>

    <snippet id="docker-using-existing-profile">
        <p>
            This section is intended for users familiar with configuring code analysis via <a href="%code-inspection-profiles-ide-help-url%">%ide% inspection profiles</a>.
        </p>

        <tabs group="cli-settings">
            <tab title="Docker image" group-key="docker-image">
                <p>You can pass the reference to the existing profile in <a href="docker-image-configuration.topic" anchor="docker-config-reference-order-resolving-profile">multiple ways</a>. Here are some
                    examples:
                </p>
                <list>
                    <li>
                        <p>
                            Mapping the profile to <code>/data/profile.xml</code> inside the container:
                        </p>
                        <code-block lang="shell" prompt="$">
                            docker run \
                               -v &lt;source-directory&gt;/:/data/project/ \
                               -v &lt;output-directory&gt;/:/data/results/ \
                               -v &lt;inspection-profile.xml&gt;:/data/profile.xml \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               jetbrains/%linter-shell%
                        </code-block>
                    </li>
                    <li>
                        <p>
                            Using the name of the profile in your project <code>.idea/inspectionProfiles/</code> folder.
                        </p>
                        <code-block lang="shell" prompt="$">
                            docker run \
                               -v &lt;source-directory&gt;/:/data/project/ \
                               -v &lt;output-directory&gt;/:/data/results/ \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                               jetbrains/%linter-shell% \
                               --profile-name &lt;custom-profile-name&gt;
                        </code-block>
                        <note>
                            <p>
                                <include from="lib_qd.topic" element-id="inspection-profile-name-note"/>
                            </p>
                        </note>
                    </li>
                </list>
            </tab>
            <tab title="Qodana CLI" group-key="qodana-cli">
                <p>You can pass the reference to the existing profile in <a href="docker-image-configuration.topic" anchor="docker-config-reference-order-resolving-profile">multiple ways</a>. Here are some
                    examples, run both commands in the project root directory:</p>
                <list>
                <li>
                    <p>
                        Mapping the profile inside the container:
                    </p>
                    <code-block lang="shell" prompt="$">
                        qodana scan \
                           -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                           -l %docker-image% \
                           --results-dir &lt;output-directory&gt; \
                           --profile-path &lt;path-to-profile&gt; \
                           --show-report
                    </code-block>
                </li>
                <li>
                <p>
                    Using the name of the profile in your project <code>.idea/inspectionProfiles/</code> folder:
                </p>
                <code-block lang="shell" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image% \
                       --results-dir &lt;output-directory&gt; \
                       --profile-name &lt;custom-profile-name&gt; \
                       --show-report
                </code-block>
                    <note>
                        <p>
                            <include from="lib_qd.topic" element-id="inspection-profile-name-note"/>
                        </p>
                    </note>
                </li>
                </list>
            </tab>
        </tabs>
    </snippet>

    <snippet id="docker-plugins-management">
        <p>
            Paid plugins are not yet supported. Each vendor must clarify licensing terms for CI usage and collaborate
            with us to make it work.
        </p>
        <p>Any free IntelliJ platform plugins or your custom plugin can be added by mounting it to the container
            plugins' directory using the following command:
        </p>
        <code-block lang="shell" prompt="$">
            docker run \
            &nbsp;&nbsp;&nbsp;-v /your/custom/path/%\pluginName%:/opt/idea/plugins/%\pluginName% \
            &nbsp;&nbsp;&nbsp;-e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
            &nbsp;&nbsp;&nbsp;jetbrains/%linter-shell%
        </code-block>
        <p>
            Refer to the <a href="docker-image-configuration.topic">technical guide</a> for more details.
        </p>
    </snippet>

    <snippet id="docker-configure-via-qodana-yaml">
        <p filter="for-dotnet">
            %instance% automatically recognizes the <code>qodana.yaml</code> file for the analysis configuration,
            so that you don't need to pass any additional parameters. In the <code>qodana.yaml</code> file, you can save
            <code>ide: QDNET</code> to run %instance% in the <a href="native-mode.md">native mode</a>.
        </p>
        <p filter="for-others">
            %instance% automatically recognizes the <code>qodana.yaml</code> file for the analysis configuration,
            so that you don't need to pass any additional parameters.</p>
        <p>
            The references to the inspection profiles will be resolved <a href="docker-image-configuration.topic" anchor="docker-config-reference-order-resolving-profile">in a particular order</a>. To
            learn about the format, see <a href="qodana-yaml.md"/>.
        </p>
    </snippet>

    <snippet id="docker-usage-statistics">
        According to the <a href="https://www.jetbrains.com/legal/agreements/user_eap.html">JetBrains EAP user
        agreement</a>, we can use third-party services to analyze the usage of our features to further improve the
        user experience. All data will be collected <a href="https://www.jetbrains.com/company/privacy.html">
        anonymously</a>. You can disable the reporting of usage statistics by adjusting the options of the
        Docker command you use. Refer to the <a href="docker-image-configuration.topic" anchor="docker-config-reference-properties-user-statistics">technical guide</a> for
        details.
    </snippet>

    <snippet id="inspection-profile-name-note">
        Note that the name of the profile does not necessarily
        match the name of the containing file stored in <code>.idea/inspectionProfiles</code>. The actual
        name is stored as the <code>&lt;option name="myName" value="%\profileName%" /&gt;</code> value in the profile <code>xml</code> file and is visible in the %ide% UI. For details on
        working with inspection profiles in %ide%, see the <a href="%code-inspection-profiles-ide-help-url%">%ide% documentation</a>.
    </snippet>

    <!-- \\\\\\\\\ UNIVERSAL CHUNK FOR LOCAL QODANA RUNS EXCEPT DOCKER IMAGES ////////// -->
    <!-- The jvm-only, py-only, and js-only filters are applied only for dedicated images respectively -->
    <!-- The gs-only filter is applied for the Getting started page -->
    <!-- The jvm-php filter is applied for all images apart from Python and JS linters -->
    <!-- The other filter applies to all images that use this filter -->
    <!-- The non-gs filter is applied for all images and excludes the content from the Getting Started page -->
    <!-- Paragraphs without filters are applied to all images -->

    <snippet id="qodana-cli-quickstart">
        <p filter="jvm-only"> To be able to run the analysis, make sure the project can be successfully built and run in the desired environment,
            that is, a JRE is properly configured, project dependencies are installed, build scripts or startup tasks are
            executed, and so on.</p>
        <p>Qodana provides two options for local analysis of your code.
            <a href="https://github.com/JetBrains/qodana-cli">Qodana CLI</a> is the easiest option to start.
            Alternatively, you can use the Docker command from the <ui-path>Docker image</ui-path> tab.</p>
        <tabs>
            <tab id="qodana-cli-tab" title="Qodana CLI">
                <p filter="non-gs">Assuming that you have already
                    <a href="https://github.com/JetBrains/qodana-cli/releases/latest">installed</a> Qodana CLI on your
                    machine, you can run this command in the project root directory:</p>
                <procedure filter="gs-only">
                    <step>Install Qodana CLI on your machine using available
                        <a href="https://github.com/JetBrains/qodana-cli/releases/latest">options</a>.</step>
                    <step><p>In the project root directory, run this command:</p>
                        <code-block lang="shell" prompt="$">qodana init</code-block>
                        <p>This will create the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file containing
                            all necessary configuration options.</p>
                    </step>
                    <step><p>In the project root directory, run this command to inspect your code:</p>
                        <code-block lang="shell" prompt="$">
                            qodana scan \
                               -e QODANA_TOKEN="&lt;cloud-project-token&gt;"
                        </code-block>
                        <p>Here, the <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>.</p>
                    </step>
                </procedure>
                <code-block filter="non-gs" prompt="$">
                    qodana scan \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       -l %docker-image%
                </code-block>
                <p>Here, the <code>QODANA_TOKEN</code> variable refers to the <a href="project-token.md">project token</a>.</p>
                <p filter="linter-omit-jvm">If you omit the linter name <code>%docker-image%</code> here, then the <a href="qodana-jvm.md"/> linter will be run instead.</p>
                <p filter="linter-omit-py">If you omit the linter name <code>%docker-image%</code> here, then the <a href="qodana-python.md"/> linter will be run instead.</p>
            </tab>
            <tab id="docker-image-tab" title="Docker image">
                <p filter="gs-only">Start with any of the <a href="linters.md">provided linters</a>. For all linters the
                    procedure is basically the same.</p>
                <p filter="non-gs">To start, pull the image from Docker Hub (only necessary to get the latest version):</p>
                <code-block filter="non-gs" lang="shell" prompt="$">
                    docker pull %docker-image%
                </code-block>
                <p filter="non-php">Start local analysis with <code>source-directory</code>
                    pointing to the root of your project and
                    <code>QODANA_TOKEN</code> referring to the <a href="project-token.md">project token</a>:</p>
                <code-block filter="gs-only" lang="shell" prompt="$">
                    docker run \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       jetbrains/qodana-&lt;linter&gt;
                </code-block>
                <p filter="php-only">If you use PHP Composer, Qodana will install your project dependencies
                    automatically right before the code analysis starts.</p>
                <p filter="php-only">In case you need to change the language level, add the following to
                    <code>&lt;source-directory&gt;/.idea/php.xml</code>:</p>
                <code-block filter="php-only" lang="xml">
                    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
                    &lt;project version="4"&gt;
                        &lt;component name="PhpProjectSharedConfiguration" php_language_level="&lt;desired level&gt;" /&gt;
                    &lt;/project&gt;
                </code-block>
                <p filter="php-only">Run the analysis locally:</p>
                <code-block filter="non-gs" lang="shell" prompt="$">
                    docker run \
                       -v &lt;source-directory&gt;/:/data/project/ \
                       -e QODANA_TOKEN="&lt;cloud-project-token&gt;" \
                       %docker-image%
                </code-block>
                <p filter="php-only">with <code>source-directory</code> pointing to the root of your project, and
                    <code>QODANA_TOKEN</code> referring to the <a href="project-token.md">project token</a>.</p>
                <p>In your browser, open <a href="https://qodana.cloud">Qodana Cloud</a> to examine inspection results.
                    Here, you can also reconfigure the analysis, see the <a href="ui-overview.md"/> section for
                    details.</p>
            </tab>
        </tabs>
    </snippet>

    <snippet id="license-audit-tab">

        <p filter="license-audit">To view license audit results, in the inspection report click the <ui-path>License audit</ui-path> tab.</p>

        <p filter="ui-overview">The <ui-path>License audit</ui-path> tab provides results of inspection by the
            <a href="license-audit.topic">license audit</a> feature. </p>

        <img src="license-audit-overview-tree.png" dark-src="license-audit-overview-tree_dark.png" width="706" alt="The dependency tree" border-effect="line"/>

        <p>License audit inspection results are grouped into a dependency tree.</p>

        <list type="decimal">
            <li>If applicable, you can expand a specific dependency to see its dependency tree.</li>
            <li>Using <ui-path>Only alerted</ui-path>, you can switch between all project dependencies and dependencies
                which licenses are incompatible with the project license.</li>
            <li>In the <ui-path>Licenses</ui-path> section, you can find the list of project, module and dependency licenses.
                Using <ui-path>Open license rules</ui-path>, you can view the rules of license compatibility.</li>
            <li>You can download the list of licenses in various formats.</li>
        </list>
    </snippet>

    <snippet id="qodana-deployment-options">
        <p>%instance% provides several deployment options to better fit your needs:</p>
        <list>
            <li><a href="native-mode.md">Native mode</a> available in the <a href="dotnet.md">Qodana for .NET</a> linter</li>
            <li><a href="docker-images.md">Docker images</a> let you inspect
                <a href="Quick-start.topic">local projects</a> and build %instance% into your CI/CD pipelines.</li>
            <li><a href="qodana-ide-plugin.md">JetBrains IDEs</a> let you run %instance%, connect to Qodana Cloud, open and review inspection reports.</li>
            <li><a href="vscode.md">Qodana extension</a> for Visual Studio Code lets you retrieve reports from Qodana Cloud and review inspection reports.</li>
            <li><a href="ci.md">Integration tools</a> include applications for seamless integration with CI/CD systems
                like GitHub and TeamCity, and guides for configuring %instance% Docker images for CI/CD. </li>
            <li><a href="qodana_gradle_plugin.md"/> provides the Gradle interface for running %instance% in IntelliJ IDEA.</li>
            <li><a href="service.md">Cloud service</a> is a cloud-based version of %instance%. </li>
        </list>
    </snippet>

    <snippet id="docker-dotnet-specific-solution-project">

        <p>By default, %instance% tries to locate and employ a single solution file, or, if no solution file is present,
        it tries to find a project file. If your project contains multiple solution files, you need to specify the exact
        filename using the <code>--solution</code> option and a relative path to a solution file. For example, to
            make %instance% always analyze the <code>MySolution.sln</code> solution file, you can use:</p>

        <code-block lang="shell" filter="for-dotnet">
          --property=qodana.net.solution=MySolution.sln
        </code-block>

        <code-block lang="shell" filter="cdnet">
            --solution=MySolution.sln
        </code-block>

        <p>Alternatively, you can specify the solution filename in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a>
            file using the <code>solution</code> option and a relative path to a solution file:</p>

        <code-block lang="yaml">
            dotnet:
                solution: MySolution.sln
        </code-block>

        <p>If your project contains no solution files and multiple project files, you need to use the
            <code>--project</code> option and a relative path to a project file. For example, for the
            <code>MyProject.csproj</code> project file you can use:</p>

        <code-block lang="shell" filter="for-dotnet">
            --property=qodana.net.project=MyProject.csproj
        </code-block>

        <code-block lang="shell" filter="cdnet">
            --project=MyProject.csproj
        </code-block>

        <p>Alternatively, you can specify the project filename in the <a href="qodana-yaml.md"><code>qodana.yaml</code></a>
            file using the <code>project</code> option:</p>

        <code-block lang="yaml">
            dotnet:
                project: MyProject.csproj
        </code-block>

        <chapter id="docker-dotnet-specific-solution-project-configure-solution" title="Configure a solution" filter="for-dotnet">

            <p>A solution configuration defines which projects in the solution to build, and which project
                configurations to use for specific projects within the solution.</p>

            <p>Each newly created solution includes the <code>Debug</code> and <code>Release</code>
                configurations, which can be complemented by your custom configurations.</p>

            <p>You can switch configurations of the current solution using the <code>--property</code>
                configuration option. For example, use this to switch to the <code>Release</code>
                configuration:</p>

            <code-block lang="shell">
                --property=qodana.net.configuration=Release
            </code-block>

            <p>Alternatively, you can specify the configuration in <code>qodana.yaml</code>:</p>

            <code-block lang="yaml">
                dotnet:
                  configuration: Release
            </code-block>

            <p>By default, the solution platform is set to <code>Any CPU</code>.You can override this using the
                <code>--property</code> option:</p>

            <code-block lang="shell">
                --property=qodana.net.platform=x86
            </code-block>

            <p>Alternatively, you can specify the platform in <code>qodana.yaml</code>:</p>

            <code-block lang="yaml">
                dotnet:
                  platform: x86
            </code-block>
        </chapter>
    </snippet>

    <snippet id="configure-jdk-qodana-yaml">

        <p filter="configure-jdk">In the <a href="qodana-yaml.md"><code>qodana.yaml</code></a> file, you
            can specify the JDK version using the <code>projectJDK</code> option, for example: </p>

        <p filter="configure-jdk-qodana-yaml">Use the <code>projectJDK</code> option to specify
            the JDK version, for example: </p>

        <code-block lang="yaml">
            projectJDK: 11
        </code-block>

        <p>or:</p>

        <code-block lang="yaml">
            projectJDK: 1.8
        </code-block>

        <p>You can also specify JDK using the name:</p>

        <code-block lang="yaml">
            projectJDK: corretto-19
        </code-block>
    </snippet>

    <snippet id="linters-supported-features">

        <p>The %qp% linter provides the following %instance% features:</p>

        <table filter="php">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="php-language-upgrade.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="taint-analysis.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="jvm">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="non-jvm">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="js">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quick-fix.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="vulnerability-checker.md"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="dotnet">
            <tr>
                <td>Feature</td>
                <td>Available under licenses</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="code-coverage.md"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Ultimate and Ultimate Plus</td>
            </tr>
            <tr>
                <td><a href="license-audit.topic"/></td>
                <td>Ultimate Plus</td>
            </tr>
        </table>

        <table filter="community">
            <tr>
                <td>Feature</td>
                <td>Available under the license</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Community</td>
            </tr>
            <tr>
                <td><a href="flexinspect.md"/></td>
                <td>Community</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Community</td>
            </tr>
        </table>

        <table filter="cdnet">
            <tr>
                <td>Feature</td>
                <td>Available under the license</td>
            </tr>
            <tr>
                <td><a href="baseline.topic"/></td>
                <td>Community</td>
            </tr>
            <tr>
                <td><a href="quality-gate.topic"/></td>
                <td>Community</td>
            </tr>

        </table>
    </snippet>

    <snippet id="github-basic-configuration">

        <procedure>
            <step>On the <ui-path>Settings</ui-path> tab of the GitHub UI, create the <code>QODANA_TOKEN</code>
                <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository">encrypted secret</a>
                and save the <a href="cloud-projects.topic" anchor="cloud-manage-projects">project token</a> as its value.
            </step>
            <step>On the <ui-path>Actions</ui-path> tab of the GitHub UI, set up a new workflow and create the
                <code>.github/workflows/code_quality.yml</code> file.</step>
            <step>To inspect the <code>main</code> and <code>master</code> branches, as well as release branches and the
                pull requests coming to your repository, save this workflow configuration to the
                <code>.github/workflows/code_quality.yml</code> file:
                <code-block lang="yaml">
                    name: Qodana
                    on:
                      workflow_dispatch:
                      pull_request:
                      push:
                        branches: # Specify your branches here
                          - main # The 'main' branch
                          - master # The 'master' branch
                          - 'releases/*' # The release branches

                    jobs:
                      qodana:
                        runs-on: ubuntu-latest
                        permissions:
                          contents: write
                          pull-requests: write
                          checks: write
                        steps:
                          - uses: actions/checkout@v3
                            with:
                              ref: ${{ github.event.pull_request.head.sha }}  # to check out the actual pull request commit, not the merge commit
                              fetch-depth: 0  # a full history is required for pull request analysis
                          - name: 'Qodana Scan'
                            uses: JetBrains/qodana-action@v2024.2
                            env:
                              QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}
                </code-block>
            </step>
        </procedure>
    </snippet>

    <snippet id="qodana-severity-levels">
        <table>
            <tr>
                <td>IDE severity</td>
                <td filter="for-report">SARIF severity</td>
                <td filter="for-profile"><a href="qodana-sarif-output.md">SARIF</a> severity</td>
                <td><a href="ui-overview.md">Qodana report</a> severity</td>
                <td><a href="https://docs.codeclimate.com/docs/getting-started-with-code-climate">Code Climate</a> severity</td>
                <td>Bitbucket severity</td>
            </tr>
            <tr>
                <td>ERROR</td>
                <td>ERROR</td>
                <td>Critical</td>
                <td>Blocker</td>
                <td>High</td>
            </tr>
            <tr>
                <td>WARNING</td>
                <td>WARNING</td>
                <td>High</td>
                <td>Critical</td>
                <td>High</td>
            </tr>
            <tr>
                <td>WEAK WARNING</td>
                <td>NOTE</td>
                <td>Moderate</td>
                <td>Major</td>
                <td>Medium</td>
            </tr>
            <tr>
                <td>TYPO</td>
                <td>NOTE</td>
                <td>Low</td>
                <td>Minor</td>
                <td>Low</td>
            </tr>
            <tr>
                <td>INFORMATION</td>
                <td>NOTE</td>
                <td>Info</td>
                <td>Info</td>
                <td>Info</td>
            </tr>
            <tr>
                <td>OTHER</td>
                <td>NOTE</td>
                <td>Info</td>
                <td>Info</td>
                <td>Info</td>
            </tr>
        </table>
    </snippet>

    <snippet id="bitbucket-basic-configuration">
        <p>Here is the basic configuration snippet for the <code>bitbucket-pipelines.yml</code> file that lets you run %instance%
            in Bitbucket Cloud pipelines:</p>

        <code-block lang="yaml">
            image: atlassian/default-image:4

            pipelines:
              branches:
                main:
                  - step:
                      name: Qodana
                      caches:
                        - qodana
                      image: jetbrains/qodana-&lt;linter&gt; # Specify a Qodana linter here. For example, jetbrains/qodana-jvm:latest
                      script:
                        - export QODANA_TOKEN=$QODANA_TOKEN  # Export the environment variable
                        - qodana --results-dir=$BITBUCKET_CLONE_DIR/.qodana --report-dir=$BITBUCKET_CLONE_DIR/.qodana/report --cache-dir=$BITBUCKET_CLONE_DIR/.qodana/cache
                      artifacts:
                        - .qodana/report

            definitions:
              caches:
                qodana: .qodana/cache
        </code-block>

        <p>Here, the <code>branches</code> block specifies which branches to inspect.</p>

        <p>The <code>image</code> block specifies the %instance% <a href="linters.md">linter</a> that will be invoked in the pipeline.</p>

        <p>The <code>script</code> block contains the <code>- export QODANA_TOKEN=$QODANA_TOKEN</code> line that specifies the
            <a href="project-token.md">project token</a> required by Qodana Cloud and saved as the <code>$QODANA_TOKEN</code>
            <a href="https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/#Secured-variables">variable</a>.
            The <code>- qodana ...</code> line in this block tells Bitbucket which directories to use while running
            the pipeline, and it can also contain %instance% <a href="docker-image-configuration.topic">options</a>.</p>
    </snippet>

    <snippet id="linter-next-steps-footer">
        <list>
            <li><a href="ci.md">Run %instance% in your CI pipeline</a></li>
            <li><a href="%config-file%">Configure the %linter% Docker image</a></li>
            <li><a href="github.md">Run %instance% using GitHub Actions</a></li>
            <li filter="for-php-linter"><a href="php-language-upgrade.topic">See how migration between PHP versions will affect the code quality</a></li>
        </list>
    </snippet>

    <snippet id="root-and-non-root-users-info-bubble">
        <tip>You can learn more about running %product% as root and non-root users from the
            <a href="docker-image-configuration.topic" anchor="docker-config-reference-docker-environment-run-non-root"/> section.</tip>
    </snippet>

    <snippet id="teamcity-add-a-qodana-runner">
        <p filter="intro">Assuming that you have already created your <a href="%TeamCityProject%">project</a> and <a href="%TeamCityBuildConfig%">build configuration</a>, follow the steps below.</p>
        <procedure>
            <step>
                In the TeamCity UI, navigate to the <a href="%TeamCityBuildConfig%">configuration page</a> of a build where you would
                like to run %product%.
            </step>
            <step>
                On the <ui-path>Build Configuration Settings</ui-path> page, navigate to the <a href="%TeamCityBuildSteps%"><ui-path>Build steps</ui-path></a> page.
            </step>
            <step>
                On the <ui-path>Build steps</ui-path> page, click the <ui-path>Add build step</ui-path> button.
            </step>
            <step>
                On the page that opens, select the <ui-path>Qodana</ui-path> runner.
            </step>
            <step>
                <p>On the <ui-path>New Build Step: Qodana</ui-path> page, click <ui-path>Show advanced options</ui-path> and configure the <ui-path>%product%</ui-path> runner:</p>
                <list>
                    <li>
                        <ui-path>Step name</ui-path> uniquely identifies this step among other build steps.
                    </li>
                    <li>
                        <ui-path>Step ID</ui-path> uniquely identifies this step among other build steps.
                    </li>
                    <li>
                        <ui-path>Execute step</ui-path> configures the build condition that will trigger this build step.
                    </li>
                    <li>
                        <ui-path>Working directory</ui-path> sets the directory for the build process, see the <a href="https://www.jetbrains.com/help/teamcity/build-working-directory.html">TeamCity</a> documentation for details.
                        You can leave this field empty if the <code>Checkout directory</code> parameter is specified on the <ui-path>Version Control Settings</ui-path> tab.
                    </li>
                    <li>
                        <ui-path>Report ID</ui-path> uniquely identifies the report to let you distinguish between multiple reports when several inspection steps are configured within a single build.
                    </li>
                    <li>
                        The <ui-path>Forward reports to TeamCity tests</ui-path> checkbox configures %instance% report availability in
                        the <a href="https://www.jetbrains.com/help/teamcity/build-results-page.html#Tests+Tab">Test tab</a> of the
                        TeamCity UI. Using this option, you can view codebase problems along with other problems detected.
                    </li>
                    <li>
                        <p><ui-path>Linter</ui-path> configures the <a href="linters.md">%product% linter</a>.</p>
                        <p filter="python">Here, specify either the <code>%qp%</code> or <code>%qp-co%</code> linter.</p>
                        <p filter="jvm">Here, specify either the <code>%qp%</code>, <code>%qp-co%</code>, <code>%qp-a%</code> or the <code>%qp-an%</code> linter.</p>
                        <p filter="php">Here, specify the <code>%qp%</code> linter.</p>
                        <p filter="js">Here, specify the <code>%qp%</code> linter.</p>
                        <p filter="golang">Here, specify the <code>%qp%</code> linter.</p>
                        <p filter="clang">Here, select <code>Custom</code> and in the <ui-path>Custom image</ui-path> field specify the <code>%qp-linter%</code> linter.</p>
                        <p filter="dotnet">Here, specify the <code>%qp%</code> linter.</p>
                        <p filter="dotnet-co">Here, specify the <code>%qp-co%</code> linter.</p>
                        <p filter="dotnet-no-build">Here, specify the <code>%qp-co%</code> linter.</p>
                    </li>
                    <li>
                        <ui-path>Version</ui-path> is by default set to <code>Latest</code>.
                    </li>
                    <li>
                        <p><ui-path>Inspection profile</ui-path> defines an <a href="inspection-profiles.md">inspection profile</a>:</p>
                        <list>
                            <li><code>Recommended (default)</code> is one of the <a href="inspection-profiles.md" anchor="inspection-profiles-existing-profiles">default profiles</a>.</li>
                            <li><code>Embedded profile</code> lets you select a default profile, see the <a href="inspection-profiles.md" anchor="inspection-profiles-existing-profiles"/> section for details.</li>
                            <li><code>Path to the IntelliJ profile</code> lets you specify the path to your <a href="inspection-profiles.md" anchor="inspection-profiles-custom-profiles">custom profile</a>. To use this option,
                                make sure that you also configure the custom profile in the <a href="inspection-profiles.md" anchor="inspection-profiles-yaml-file"><code>qodana.yaml</code></a> file.</li>
                        </list>
                    </li>
                    <li><ui-path>Cloud Token</ui-path> configures a <a href="project-token.md">project token</a> generated in Qodana Cloud. </li>
                    <li>
                        <ui-path>Additional Docker arguments</ui-path> configures the arguments accepted by a Docker image, see the <a href="docker-image-configuration.topic"/> section for details.
                    </li>
                    <li>
                        <p><ui-path>Additional Qodana arguments</ui-path> lets you extend the default Qodana functionality, see the
                            <a href="docker-image-configuration.topic" anchor="docker-config-reference-option-overview"/> section for details.</p>
                        <p filter="dotnet-no-build">In this field, specify the <code>--no-build</code> option.</p>
                        <p filter="baseline">In this field, specify the <a href="baseline.topic">baseline</a> feature using
                            the <code>--baseline &lt;path/to/qodana.sarif.json&gt;</code> option.</p>
                        <p filter="clang-compilation-override">
                            To override the location of a compilation command database, specify the location relatively to
                            the project root using the <code>--compile-commands &lt;path-to-compile_commands.json&gt;</code> command.
                        </p>
                    </li>
                </list>
                <img src="teamcity-runner.png" alt="Configuring the Qodana runner" width="680" border-effect="line"/>
            </step>
            <step>
                Click the <ui-path>Save</ui-path> button.
            </step>
        </procedure>
    </snippet>


</topic>
