<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/stardust/html-entities.dtd">

<topic xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/stardust/topic.v2.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       title="Forward reports"
       id="cloud-forward-reports">

    <var name="GitHubLink" value="docs.github.com/en/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository"/>
    <var name="GitLabLink" value="docs.gitlab.com/ee/ci/variables/"/>
    <var name="TeamCityLink" value="www.jetbrains.com/help/teamcity/typed-parameters.html#Password+Type"/>
    <var name="SpaceAutomationLink" value="www.jetbrains.com/help/space/automation-concepts.html#what-is-space-automation"/>
    <var name="TeamCityParams" value="--send-report --token &#37;env.QODANA_TOKEN&#37;"/>

    <chapter id="cloud-forward-reports-configure-cloud" title="Configure Qodana Cloud">

    <p>To see %product% reports in the %product_cloud% UI, you need to get them uploaded. Prior to that, you need to
        create a project and generate a project-related token as described below. </p>

    <img src="qc-new-project.png" dark-src="qc-new-project_dark.png" alt="The New Project button" width="706" border-effect="line"/>

    <list type="decimal">
        <li>To create a new project in the %product_cloud% UI, on the <menupath>Projects</menupath> page click  the
            <menupath>New project</menupath> button in the upper-right corner.</li>
        <li>After the new project was created, you can configure it.</li>
        <li>Click the <menupath>Generate token</menupath> button to generate a project token.</li>
        <li><p>Copy the project token and save it for future use.</p>
            <img src="qc-new-project-2.png" dark-src="qc-new-project-2_dark.png" alt="Project token" width="706" border-effect="line"/>
            <note>Once generated, the token is available for copying only before pushing the first report to %product_cloud%.
                The same rule applies to renaming and deletion of projects.</note>
        </li>
    </list>

    </chapter>

    <chapter id="cloud-forward-reports-configure-qodana" title="Configure report forwarding">

        <!-- I need to test all options and actualize them in the parameters page. And maybe mention them here once more -->

        <p>This chapter explains how to forward %product% inspection reports to %product_cloud% based on the following cases:</p>

        <list>
            <li><a anchor="cloud-forward-reports-local-run">Local %product% run</a></li>
            <li><a anchor="cloud-forward-reports-github-actions">GitHub Actions</a></li>
            <li><a anchor="cloud-forward-reports-gitlab-ci">GitLab CI/CD</a></li>
            <li><a anchor="cloud-forward-reports-jenkins">Jenkins</a></li>
            <li><a anchor="cloud-forward-reports-teamcity-plugin">TeamCity plugin</a></li>
            <li><a anchor="cloud-forward-reports-space-automation">Space Automation</a></li>
        </list>

    <chapter id="cloud-forward-reports-local-run" title="Local Qodana run">

        <p>Below is the CLI command for running the Docker version of %product% locally:</p>

        <code style="block" lang="bash">
            sudo docker run -v $(pwd)/project/:/data/project/ \
            -v $(pwd)/report/:/data/results/ &lt;qodana_linter&gt; \
            --send-report -t &lt;qodana_cloud_token&gt;
        </code>

        <p>Here, <code style="inline" lang="bash">--send-report</code> enables forwarding %product%
            reports to %product_cloud%, and the <code style="inline" lang="bash">-t</code> option specifies the project
        token.</p>

        <p>For more details about configuration options, see the configuration options of your linter. </p>

    </chapter>

    <chapter id="cloud-forward-reports-github-actions" title="GitHub Actions">

        <p>To start forwarding %product% reports from GitHub Actions, create an
            <a href="https://%GitHubLink%">encrypted secret</a> with the <code>QODANA_TOKEN</code> name.</p>

        <p>Use this configuration snippet in the workflow configuration:</p>

        <code style="block" lang="yaml">
            - name: 'Qodana Scan'
               uses: JetBrains/qodana-action@latest
               with:
                 linter: jetbrains/qodana-&lt;linter&gt;
                 qodana-token: ${{ secrets.QODANA_TOKEN }}
        </code>

    </chapter>

    <chapter id="cloud-forward-reports-gitlab-ci" title="GitLab CI/CD">

        <p>To forward %product% reports from GitLab CI/CD, define the <code>QODANA_CLOUD</code>
            <a href="https://%GitLabLink%">CI/CD variable</a> in your repository.</p>

        <p>Use this variable in your CI/CD pipeline:</p>

        <code style="block" lang="yaml">
            qodana:
             image:
               name: jetbrains/qodana-&lt;linter&gt;
               entrypoint: ['']
             script:
               - qodana --results-dir=$CI_PROJECT_DIR/qodana
                --save-report --report-dir=$CI_PROJECT_DIR/qodana/report
                --send-report --token=$QODANA_CLOUD
             artifacts:
               paths:
                 - qodana
        </code>

    </chapter>

    <chapter id="cloud-forward-reports-jenkins" title="Jenkins">

    </chapter>

    <chapter id="cloud-forward-reports-teamcity-plugin" title="TeamCity plugin">

        <p>To configure a TeamCity plugin to push %product% reports to Qodana Cloud, follow these steps:</p>

        <procedure>
            <step>Add a new build parameter with the <code>QODANA_TOKEN</code> name and define it as a
                <a href="https://%TeamCityLink%">password</a> parameter.</step>
            <step>Open the <code>Qodana</code> build step.</step>
            <step><p>Add <code>%TeamCityParams%</code> to the <menupath>Additional arguments for the entry point</menupath>
                section as additional parameters to the entry point (<code>qodana</code>).</p>
            </step>
        </procedure>
        <p>If necessary, repeat the third step for each plugin instance you need to upload reports from. For example, you
        may want to configure the Code inspection, Clone Finder, and License Audit TeamCity plugins on the same runner.</p>
    </chapter>

    <chapter id="cloud-forward-reports-space-automation" title="Space Automation">

        <p>To forward %product% reports from Space Automation, create the <code>.space.kts</code> file in the root
            directory of your repository. Save this code snippet in <code>.space.kts</code>:</p>

        <code style="block" lang="kotlin">
            job("Qodana") {
                container("jetbrains/qodana-jvm-community:2021.3") {
                    // https://www.jetbrains.com/help/space/secrets-and-parameters.html
                    env["token"] = Secrets("token")
                    shellScript {
                        content = """
                qodana -t ${'$'}token --send-report
            """.trimIndent()
                    }
                }
            }
        </code>

        <p>To learn more about customization of Space Automation jobs, explore the
            <a href="https://%SpaceAutomationLink%">What is Space Automation?</a> section of the JetBrains Space
            documentation.</p>
    </chapter>

    </chapter>

</topic>
